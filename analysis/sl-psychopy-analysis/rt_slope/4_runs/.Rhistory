# Add the targets' indices
structured_tsl_extracted$reindex <- reindex
# Remove targets with no response time
structured_tsl_extracted <- structured_tsl_extracted[!is.na(structured_tsl_extracted$rt_col),]
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
domain <- NULL
modality <- NULL
type <- NULL
task <- NULL
STSL<- NULL
stsl_range <- NULL
upper_bound <- NULL
lower_bound <- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt and rt_slope
for(id in list_part_id){
part_id <- append(part_id, id)
domain <- append(domain, "auditory")
type <- append (type, "structured")
task<- append(task, "TSL")
modality <- append (modality, "non-linguistic")
mean_rt <- append(mean_rt, round(mean(structured_tsl_extracted$rt_col[structured_tsl_extracted$id==id]),digits=3))
rt_slope <- append (rt_slope, round(summary(lm(structured_tsl_extracted$rt_col[structured_tsl_extracted$id==id]~structured_tsl_extracted$reindex[structured_tsl_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (structured_tsl_extracted[ which(structured_tsl_extracted$id==id),])
this_range<- range(data_this_id$rt_col, na.rm = TRUE)
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
STSL <- data.frame(part_id, task, domain,type,modality,mean_rt, upper_bound, lower_bound, rt_slope)
# for internal checking only: find mean rt_slope
mean_stsl_rt_slope <- mean (STSL$rt_slope)
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
id <- NULL
trial <-NULL
target <- NULL
# Identify the rows when this condition's target was presented
random_ssl_targets <- which(tolower(trials_4_6$starget)==tolower(trials_4_6$soundFile))
# Isolate participants' response times.
# Include rows when the participant responded to stimuli adjacent to the target (i.e. any time that the participant pressed the button within one stimulus before or after the target)
for (i in random_ssl_targets) {
# Isolate the ID number
id <- append(id, paste(trials_4_6[i,]$PartID))
# If the participant responded while the target was presented
if (!is.na(trials_4_6[i,] [,"random_block_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, trials_4_6[i,][,"random_block_key_resp.rt"])}
# If the participant responded during the stimulus following the target
else if (!is.na(trials_4_6[i+1,] [,"random_block_key_resp.rt"])){
# Count their response time as the duration that the target was presented (480 ms) plus the response time to the following stimulus
rt_col[(match(i, random_ssl_targets))] <- .48+trials_4_6[i+1, ][,"random_block_key_resp.rt"]}
# Check if you are looking at the first target, which is always the first stimulus. If so, it does not have a preceeding target
else if (i>0){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_4_6[i,][,"random_block_key_resp.rt"])}
# If the participant responded during the stimulus preceding the target
else if (!is.na(trials_4_6[i-1,] [,"random_block_key_resp.rt"])){
# Count their response time as how much sooner they responded than when the stimulus was presented
rt_col[match(i, random_ssl_targets)] <- 0-trials_4_6[i-1,][,"random_block_key_resp.rt"]}
# If they did not respond within the correct time frame
else if (is.na(trials_4_6[i,] [,"random_block_key_resp.rt"])){
# Count their response time as NA
rt_col <- append (rt_col, NA)}
}
# Match id and response times
random_ssl_extracted <- data.frame(id,rt_col)
# List unique participant IDs for this condition
list_part_id <- unique(random_ssl_extracted$id)
# Find the number of targets shown to each participant
a <- NULL
for(i in list_part_id){a <- append(a,sum(random_ssl_extracted$id==i))}
# For each participant, index the targets
reindex <- NULL
for (i in a) {reindex <- append (reindex, rep(1:i, 1))}
# Add the targets' indices
random_ssl_extracted$reindex <- reindex
# Remove targets with no response time
random_ssl_extracted <- random_ssl_extracted[!is.na(random_ssl_extracted$rt_col),]
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
domain <- NULL
modality <- NULL
task <- NULL
type <- NULL
RSSL<- NULL
rssl_range <- NULL
upper_bound <- NULL
lower_bound <- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt and rt_slope
for(id in list_part_id){
part_id <- append(part_id, id)
domain <- append(domain, "auditory")
task <- append (task, "SSL")
type <- append (type, "random")
modality <- append (modality, "linguistic")
mean_rt <- append(mean_rt, round(mean(random_ssl_extracted$rt_col[random_ssl_extracted$id==id]),digits=3))
rt_slope <- append (rt_slope, round(summary(lm(random_ssl_extracted$rt_col[random_ssl_extracted$id==id]~random_ssl_extracted$reindex[random_ssl_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (random_ssl_extracted[ which(random_ssl_extracted$id==id),])
this_range<- range(data_this_id$rt_col, na.rm = TRUE)
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
RSSL <- data.frame(part_id, task, domain,type,modality,mean_rt, upper_bound, lower_bound, rt_slope)
# for internal checking only: find mean rt_slope
mean_rssl_rt_slope <- mean (RSSL$rt_slope)
trials_1_3 <- visual_data_frame[ which(visual_data_frame$Run < 4), ]
trials_4_6 <- visual_data_frame[ which(visual_data_frame$Run > 3), ]
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
id <- NULL
trial <-NULL
target <- NULL
# Identify the rows when this condition's target was presented
structure_lsl_targets <- which(tolower(trials_1_3$ltarget)==tolower(trials_1_3$image))
# Isolate participants' response times.
# Include rows when the participant responded to stimuli adjacent to the target (i.e. any time that the participant pressed the button within one stimulus before or after the target)
for (i in structure_lsl_targets) {
# Isolate the ID number
id <- append(id, paste(trials_1_3[i,]$PartID))
# If the participant responded while the target was presented
if (!is.na(trials_1_3[i,] [,"l_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, trials_1_3[i,][,"l_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus following the target
else if (!is.na(trials_1_3[i+1,] [,"l_block_trial_key_resp.rt"])){
# Count their response time as the duration that the target was presented (1000 ms) plus the response time to the following stimulus
rt_col[(match(i, structure_lsl_targets))] <- 1+trials_1_3[i+1, ][,"l_block_trial_key_resp.rt"]}
# Check if you are looking at the first target, which is always the first stimulus. If so, it does not have a preceeding target
else if (i>0){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_1_3[i,][,"l_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus preceding the target
else if (!is.na(trials_1_3[i-1,] [,"l_block_trial_key_resp.rt"])){
# Count their response time as how much sooner they responded than when the stimulus was presented
rt_col[match(i, structure_lsl_targets)] <- 0-trials_1_3[i-1,][,"l_block_trial_key_resp.rt"]}
# If the participant did not respond to the target within the correct time frame
else if (is.na(trials_1_3[i,] [,"l_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_1_3[i,][,"l_block_trial_key_resp.rt"])}
}
# Match id and response times
structure_lsl_extracted <- data.frame(id,rt_col)
# List unique participant IDs for this condition
list_part_id <- unique(structure_lsl_extracted$id)
# Find the number of targets shown to each participant
a <- NULL
for(i in list_part_id){a <- append(a,sum(structure_lsl_extracted$id==i))}
# For each participant, index the targets
reindex <- NULL
for (i in a) {reindex <- append (reindex, rep(1:i, 1))}
# Add the targets' indices
structure_lsl_extracted$reindex <- reindex
# Remove targets with no response time
structure_lsl_extracted <- structure_lsl_extracted[!is.na(structure_lsl_extracted$rt_col),]
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
domain <- NULL
modality <- NULL
type <- NULL
task <- NULL
RLSL<- NULL
slsl_range <- NULL
upper_bound <- NULL
lower_bound <- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt and rt_slope
for(id in list_part_id){
part_id <- append(part_id, id)
domain <- append(domain, "visual")
type <- append (type, "structured")
modality <- append (modality, "linguistic")
task <- append (task, "LSL")
mean_rt <- append(mean_rt, round(mean(structure_lsl_extracted$rt_col[structure_lsl_extracted$id==id]),digits=3))
rt_slope <- append (rt_slope, round(summary(lm(structure_lsl_extracted$rt_col[structure_lsl_extracted$id==id]~structure_lsl_extracted$reindex[structure_lsl_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (structure_lsl_extracted[ which(structure_lsl_extracted$id==id),])
this_range<- range(data_this_id$rt_col, na.rm = TRUE)
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
SLSL <- data.frame(part_id, task, domain,type,modality,mean_rt, upper_bound, lower_bound, rt_slope)
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
id <- NULL
trial <-NULL
target <- NULL
# Identify the rows when this condition's target was presented
structured_vsl_targets <- which(tolower(trials_4_6$vtarget)==tolower(trials_4_6$image))
# Isolate participants' response times.
# Include rows when the participant responded to stimuli adjacent to the target (i.e. any time that the participant pressed the button within one stimulus before or after the target)
for (i in structured_vsl_targets) {
# Isolate the ID number
id <- append(id, paste(trials_4_6[i,]$PartID))
# If the participant responded while the target was presented
if (!is.na(trials_4_6[i,] [,"v_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, trials_4_6[i,][,"v_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus following the target
else if (!is.na(trials_4_6[i+1,] [,"v_block_trial_key_resp.rt"])){
# Count their response time as the duration that the target was presented (1000 ms) plus the response time to the following stimulus
rt_col[(match(i, structured_vsl_targets))] <- 1+trials_4_6[i+1, ][,"v_block_trial_key_resp.rt"]}
# Check if you are looking at the first target, which is always the first stimulus. If so, it does not have a preceeding target
else if (i>0){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_1_3[i,][,"v_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus preceding the target
else if (!is.na(trials_4_6[i-1,] [,"v_block_trial_key_resp.rt"])){
# Count their response time as how much sooner they responded than when the stimulus was presented
rt_col[match(i, structured_vsl_targets)] <- 0-trials_4_6[i-1,][,"v_block_trial_key_resp.rt"]}
# If the participant did not respond to the target within the correct time frame
else if (is.na(trials_4_6[i,] [,"v_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_4_6[i,][,"v_block_trial_key_resp.rt"])}
}
# Match id and response times
structured_vsl_extracted <- data.frame(id,rt_col)
# List unique participant IDs for this condition
list_part_id <- unique(structured_vsl_extracted$id)
# Find the number of targets shown to each participant
a <- NULL
for(i in list_part_id){a <- append(a,sum(structured_vsl_extracted$id==i))}
# For each participant, index the targets
reindex <- NULL
for (i in a) {reindex <- append (reindex, rep(1:i, 1))}
# Add the targets' indices
structured_vsl_extracted$reindex <- reindex
# Remove targets with no response time
structured_vsl_extracted <- structured_vsl_extracted[!is.na(structured_vsl_extracted$rt_col),]
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
domain <- NULL
task<- NULL
modality <- NULL
type <- NULL
SVSL<- NULL
svsl_range <- NULL
upper_bound <- NULL
lower_bound <- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt and rt_slope
for(id in list_part_id){
task <- append (task, "VSL")
part_id <- append(part_id, id)
domain <- append(domain, "visual")
type <- append (type, "structured")
modality <- append (modality, "non-linguistic")
mean_rt <- append(mean_rt, round(mean(structured_vsl_extracted$rt_col[structured_vsl_extracted$id==id]),digits=3))
rt_slope <- append (rt_slope, round(summary(lm(structured_vsl_extracted$rt_col[structured_vsl_extracted$id==id]~structured_vsl_extracted$reindex[structured_vsl_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (structured_vsl_extracted[ which(structured_vsl_extracted$id==id),])
this_range<- range(data_this_id$rt_col, na.rm = TRUE)
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
SVSL <- data.frame(part_id,task, domain,type,modality,mean_rt,upper_bound, lower_bound,rt_slope)
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
id <- NULL
trial <-NULL
target <- NULL
# Identify the rows when this condition's target was presented
random_lsl_targets <- which(tolower(trials_4_6$ltarget)==tolower(trials_4_6$image))
# Isolate participants' response times.
# Include rows when the participant responded to stimuli adjacent to the target (i.e. any time that the participant pressed the button within one stimulus before or after the target)
for (i in random_lsl_targets) {
# Isolate the ID number
id <- append(id, paste(trials_4_6[i,]$PartID))
# If the participant responded while the target was presented
if (!is.na(trials_4_6[i,] [,"l_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, trials_4_6[i,][,"l_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus following the target
else if (!is.na(trials_4_6[i+1,] [,"l_block_trial_key_resp.rt"])){
# Count their response time as the duration that the target was presented (1000 ms) plus the response time to the following stimulus
rt_col[(match(i, random_lsl_targets))] <- 1+trials_4_6[i+1, ][,"l_block_trial_key_resp.rt"]}
# Check if you are looking at the first target, which is always the first stimulus. If so, it does not have a preceeding target
else if (i>0){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_1_3[i,][,"v_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus preceding the target
else if (!is.na(trials_4_6[i-1,] [,"l_block_trial_key_resp.rt"])){
# Count their response time as how much sooner they responded than when the stimulus was presented
rt_col[match(i, random_lsl_targets)] <- 0-trials_4_6[i-1,][,"l_block_trial_key_resp.rt"]}
# If the participant did not respond to the target within the correct time frame
else if (is.na(trials_4_6[i,] [,"l_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_4_6[i,][,"l_block_trial_key_resp.rt"])}
}
# Match id and response times
random_lsl_extracted <- data.frame(id,rt_col)
# List unique participant IDs for this condition
list_part_id <- unique(random_lsl_extracted$id)
# Find the number of targets shown to each participant
a <- NULL
for(i in list_part_id){a <- append(a,sum(random_lsl_extracted$id==i))}
# For each participant, index the targets
reindex <- NULL
for (i in a) {reindex <- append (reindex, rep(1:i, 1))}
# Add the targets' indices
random_lsl_extracted$reindex <- reindex
# Remove targets with no response time
random_lsl_extracted <- random_lsl_extracted[!is.na(random_lsl_extracted$rt_col),]
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
domain <- NULL
modality <- NULL
type <- NULL
task <- NULL
RLSL<- NULL
rlsl_range <- NULL
upper_bound <- NULL
lower_bound <- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt and rt_slope
for(id in list_part_id){
part_id <- append(part_id, id)
domain <- append(domain, "visual")
type <- append (type, "random")
modality <- append (modality, "linguistic")
mean_rt <- append(mean_rt, round(mean(random_lsl_extracted$rt_col[random_lsl_extracted$id==id]),digits=3))
task <- append (task, "LSL")
rt_slope <- append (rt_slope, round(summary(lm(random_lsl_extracted$rt_col[random_lsl_extracted$id==id]~random_lsl_extracted$reindex[random_lsl_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (random_lsl_extracted[ which(random_lsl_extracted$id==id),])
rlsl_range<- range(data_this_id$rt_col, na.rm = TRUE)
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
RLSL <- data.frame(part_id,task, domain,type,modality,mean_rt, upper_bound, lower_bound, rt_slope)
# for internal checking only: find mean rt_slope
mean_rlsl_rt_slope <- mean (RLSL$rt_slope)
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
id <- NULL
trial <-NULL
target <- NULL
# Identify the rows when this condition's target was presented
random_vsl_targets <- which(tolower(trials_1_3$vtarget)==tolower(trials_1_3$image))
# Isolate participants' response times.
# Include rows when the participant responded to stimuli adjacent to the target (i.e. any time that the participant pressed the button within one stimulus before or after the target)
for (i in random_vsl_targets) {
# Isolate the ID number
id <- append(id, paste(trials_1_3[i,]$PartID))
# If the participant responded while the target was presented
if (!is.na(trials_1_3[i,] [,"v_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, trials_1_3[i,][,"v_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus following the target
else if (!is.na(trials_1_3[i+1,] [,"v_block_trial_key_resp.rt"])){
# Count their response time as the duration that the target was presented (1000 ms) plus the response time to the following stimulus
rt_col[(match(i, random_vsl_targets))] <- 1+trials_1_3[i+1, ][,"v_block_trial_key_resp.rt"]}
# Check if you are looking at the first target, which is always the first stimulus. If so, it does not have a preceeding target
else if (i>0){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_1_3[i,][,"v_block_trial_key_resp.rt"])}
# If the participant did not respond to the target within the correct time frame
else if (is.na(trials_1_3[i,] [,"v_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_1_3[i,][,"v_block_trial_key_resp.rt"])}
}
# Match id and response times
random_vsl_extracted <- data.frame(id,rt_col)
# List unique participant IDs for this condition
list_part_id <- unique(random_vsl_extracted$id)
# Find the number of targets shown to each participant
a <- NULL
for(i in list_part_id){a <- append(a,sum(random_vsl_extracted$id==i))}
# For each participant, index the targets
reindex <- NULL
for (i in a) {reindex <- append (reindex, rep(1:i, 1))}
# Add the targets' indices
random_vsl_extracted$reindex <- reindex
# Remove targets with no response time
random_vsl_extracted <- random_vsl_extracted[!is.na(random_vsl_extracted$rt_col),]
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
domain <- NULL
modality <- NULL
type <- NULL
task <-NULL
RVSL <- NULL
rvsl_range <- NULL
upper_bound <- NULL
lower_bound <- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt and rt_slope
for(id in list_part_id){
part_id <- append(part_id, id)
domain <- append(domain, "visual")
type <- append (type, "random")
task <- append (task, "VSL")
modality <- append (modality, "non-linguistic")
mean_rt <- append(mean_rt, round(mean(random_vsl_extracted$rt_col[random_vsl_extracted$id==id]),digits=3))
rt_slope <- append (rt_slope, round(summary(lm(random_vsl_extracted$rt_col[random_vsl_extracted$id==id]~random_vsl_extracted$reindex[random_vsl_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (random_vsl_extracted[ which(random_vsl_extracted$id==id),])
this_range<- range(data_this_id$rt_col, na.rm = TRUE)
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
RVSL <- data.frame(part_id, task, domain, type,modality,mean_rt,upper_bound, lower_bound, rt_slope)
# for internal checking only: find mean rt_slope
mean_rvsl_rt_slope <- mean (RVSL$rt_slope)
# Bind visual cconditions
visual_rt<- rbind(RLSL, RVSL, SLSL, SVSL)
# Bind auditory conditions
auditory_rt<- rbind(RTSL, RSSL, STSL, SSSL)
# Bind all conditions
indiv_rt <- rbind(RLSL, RSSL, RTSL, RVSL, SLSL, SSSL, STSL, SVSL)
setwd("../output_files/")
write.csv(indiv_rt, "6_runs_rt_slope_indiv.csv")
group_rt_slope <- NULL
mean_struct_rt_slope <- NULL
mean_rand_rt_slope <- NULL
task <- NULL
# Find mean LSL accuracy across participants
task <- append (task, paste ("lsl"))
mean_struct_rt_slope <- append(mean_struct_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="structured"
& indiv_rt$task== "LSL"), ]$rt_slope), digits =3))
mean_rand_rt_slope <- append(mean_rand_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="random"
& indiv_rt$task== "LSL"), ]$rt_slope), digits =3))
# Find mean SSL accuracy across participants
task <- append (task, paste ("ssl"))
mean_struct_rt_slope <- append(mean_struct_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="structured"
& indiv_rt$task== "SSL"), ]$rt_slope), digits =3))
mean_rand_rt_slope <- append(mean_rand_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="random"
& indiv_rt$task== "SSL"), ]$rt_slope), digits =3))
# Find mean TSL accuracy across participants
task <- append (task, paste ("tsl"))
mean_struct_rt_slope <- append(mean_struct_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="structured"
& indiv_rt$task== "TSL"), ]$rt_slope), digits =3))
mean_rand_rt_slope <- append(mean_rand_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="random"
& indiv_rt$task== "TSL"), ]$rt_slope), digits =3))
# Find mean VSL accuracy across participants
task <- append (task, paste ("vsl"))
mean_struct_rt_slope <- append(mean_struct_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="structured"
& indiv_rt$task== "VSL"), ]$rt_slope), digits =3))
mean_rand_rt_slope <- append(mean_rand_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="random"
& indiv_rt$task== "VSL"), ]$rt_slope), digits =3))
# Combine group accuracies into one data frame
group_accuracy <- data.frame(cbind(task, mean_rand_rt_slope, mean_struct_rt_slope))
setwd("../output_files/")
write.csv(group_accuracy, "6_runs_rt_slope_group.csv")
#Set correct working directory
setwd("Documents/qlab/analysis/sl-psychopy-analysis/4_runs/nov_pilot/scripts/")
# Remove objects in environment
rm(list=ls())
#Set correct working directory
setwd("Documents/qlab/analysis/sl-psychopy-analysis/4_runs/nov_pilot/scripts/")
#Set correct working directory
setwd("/Documents/qlab/analysis/sl-psychopy-analysis/4_runs/nov_pilot/scripts/")
getwd()
setwd("..")
setwd("..")
setwd("..")
setwd("..")
setwd("..")
setwd("..")
getwd()
setwd("..")
#Set correct working directory
setwd("/Documents/qlab/analysis/sl-psychopy-analysis/4_runs/nov_pilot/scripts/")
#Set correct working directory
setwd("/Documents/qlab/analysis/sl-psychopy-analysis/rt_slope/4_runs/scripts/")
getwd()
#Set correct working directory
setwd("Documents/qlab/analysis/sl-psychopy-analysis/rt_slope/4_runs/scripts/")
# Remove objects in environment
rm(list=ls())
# NOTE: For use on Mac
old_auditory_path <- "/Users/jasinskagroup/Desktop/QLAB/psychopy_sl_beh-master/rt_slope/4_runs/cleaned_data/auditory/old_format/"
new_auditory_path <- "/Users/jasinskagroup/Desktop/QLAB/psychopy_sl_beh-master/rt_slope/4_runs/cleaned_data/auditory/new_format/"
visual_path <- "/Users/jasinskagroup/Desktop/QLAB/psychopy_sl_beh-master/rt_slope/4_runs/cleaned_data/visual/"
# NOTE: For use on Mac
old_auditory_path <- "/../../cleaned_data/auditory/old_format/"
# NOTE: For use on Mac
old_auditory_path <- "/../cleaned_data/auditory/old_format/"
new_auditory_path <- "/../cleaned_data/auditory/new_format/"
visual_path <- "/../../cleaned_data/visual/"
old_afiles <- list.files(path=old_auditory_path, pattern="*.csv")
getwd()
setwd()
setwd("..")
getwd()
# NOTE: For use on Mac
old_auditory_path <- "/../original_data/auditory/old_format/"
new_auditory_path <- "/../original_data/auditory/new_format/"
visual_path <- "/../../cleaned_data/visual/"
old_afiles <- list.files(path=old_auditory_path, pattern="*.csv")
new_afiles <- list.files(path=new_auditory_path, pattern="*.csv")
