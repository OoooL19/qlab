rt_p_value <- append(rt_p_value, paste((t.test (sssl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random tsl
stsl<-subset(all_structured, task=tsl)
category <- append(category, paste("structured TSL"))
rt_p_value <- append(rt_p_value, paste((t.test (stsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured vsl
svsl<-subset(all_structured, task=vsl)
category <- append(category, paste("structured VSL"))
rt_p_value <- append(rt_p_value, paste((t.test (svsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured non-linguistic
s_non_ling<-subset(all_structured, modality="non-linguistic")
category <- append(category, paste("structured non-linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (s_non_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured linguistic
s_ling<-subset(all_structured, modality="linguistic")
category <- append(category, paste("structured linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (s_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured auditory
s_auditory<-subset(all_structured, domain="auditory")
category <- append(category, paste("structured auditory"))
rt_p_value <- append(rt_p_value, paste((t.test (s_auditory$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured visual
s_visual<-subset(all_structured, domain="visual")
category <- append(category, paste("structured visual"))
rt_p_value <- append(rt_p_value, paste((t.test (s_visual$rt_slope, mu =0, alternative= "less"))$p.value))
# Run t-tests for random values------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Subset random condition and convert rt_slope to numeric
all_random <- subset(rt_slope_t_test, type="random")
all_random$rt_slope <- as.numeric(all_random$rt_slope)
# t-test on random ssl
rlsl<-subset(all_random, task=LSL)
category <- append(category, paste("random LSL"))
rt_p_value <- append(rt_p_value, paste((t.test (rlsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random ssl
rssl<-subset(all_random, task=ssl)
category <- append(category, paste("random SSL"))
rt_p_value <- append(rt_p_value, paste((t.test (rssl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random tsl
rtsl<-subset(all_random, task=tsl)
category <- append(category, paste("random TSL"))
rt_p_value <- append(rt_p_value, paste((t.test (rtsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random vsl
rvsl<-subset(all_random, task=vsl)
category <- append(category, paste("random VSL"))
rt_p_value <- append(rt_p_value, paste((t.test (rvsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random non-linguistic
r_non_ling<-subset(all_random, modality="non-linguistic")
category <- append(category, paste("random non-linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (r_non_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random linguistic
r_ling<-subset(all_random, modality="linguistic")
category <- append(category, paste("random linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (r_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random auditory
r_auditory<-subset(all_random, domain="auditory")
category <- append(category, paste("random auditory"))
rt_p_value <- append(rt_p_value, paste((t.test (r_auditory$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random visual
r_visual<-subset(all_random, domain="visual")
category <- append(category, paste("random visual"))
rt_p_value <- append(rt_p_value, paste((t.test (r_visual$rt_slope, mu =0, alternative= "less"))$p.value))
# Combine into one data frame
rt_rt_p_values<- data.frame(category, acc_p_value, rt_p_value)
rt_slope_t_test<-all_rt
all_lsl<-subset(rt_slope_t_test, task=LSL)
category <- append(category, paste("lsl"))
category <- NULL
rt_p_value<- NULL
acc_p_value<- NULL
# Run t-tests for random/structured combined------------------------------------------------------------------------------------------------------------------------------------------------------------------------
rt_slope_t_test<-all_rt
# t-test on all lsl
all_lsl<-subset(rt_slope_t_test, task=LSL)
category <- append(category, paste("lsl"))
rt_p_value <- append(rt_p_value, paste((t.test (all_lsl$rt_slope, mu =0, alternative= "less"))$p.value))
acc_p_value <- append(acc_p_value, paste((t.test(accuracy_t_test$LSL, mu = .5))$p.value))
# t-test on all ssl
all_ssl<-subset(rt_slope_t_test, task=ssl)
category <- append(category, paste("ssl"))
rt_p_value <- append(rt_p_value, paste((t.test (all_ssl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on all tsl
all_tsl<-subset(rt_slope_t_test, task=tsl)
category <- append(category, paste("tsl"))
rt_p_value <- append(rt_p_value, paste((t.test (all_tsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on all vsl
all_vsl<-subset(rt_slope_t_test, task=vsl)
category <- append(category, paste("vsl"))
rt_p_value <- append(rt_p_value, paste((t.test (all_vsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on all non-linguistic
all_non_ling<-subset(rt_slope_t_test, modality="non-linguistic")
category <- append(category, paste("non-linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (all_non_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on all linguistic
all_ling<-subset(rt_slope_t_test, modality="linguistic")
category <- append(category, paste("linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (all_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on all auditory
all_auditory<-subset(rt_slope_t_test, domain="auditory")
category <- append(category, paste("auditory"))
rt_p_value <- append(rt_p_value, paste((t.test (all_auditory$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on all visual
all_visual<-subset(rt_slope_t_test, domain="visual")
category <- append(category, paste("visual"))
rt_p_value <- append(rt_p_value, paste((t.test (all_visual$rt_slope, mu =0, alternative= "less"))$p.value))
# Run t-tests for structured values------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Subset structured condition and convert rt_slope to numeric
all_structured <- subset(rt_slope_t_test, type="structured")
all_structured$rt_slope <- as.numeric(all_structured$rt_slope)
# t-test on structured ssl
slsl<-subset(all_structured, task=LSL)
category <- append(category, paste("structured LSL"))
rt_p_value <- append(rt_p_value, paste((t.test (slsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured ssl
sssl<-subset(all_structured, task=ssl)
category <- append(category, paste("structured SSL"))
rt_p_value <- append(rt_p_value, paste((t.test (sssl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random tsl
stsl<-subset(all_structured, task=tsl)
category <- append(category, paste("structured TSL"))
rt_p_value <- append(rt_p_value, paste((t.test (stsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured vsl
svsl<-subset(all_structured, task=vsl)
category <- append(category, paste("structured VSL"))
rt_p_value <- append(rt_p_value, paste((t.test (svsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured non-linguistic
s_non_ling<-subset(all_structured, modality="non-linguistic")
category <- append(category, paste("structured non-linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (s_non_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured linguistic
s_ling<-subset(all_structured, modality="linguistic")
category <- append(category, paste("structured linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (s_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured auditory
s_auditory<-subset(all_structured, domain="auditory")
category <- append(category, paste("structured auditory"))
rt_p_value <- append(rt_p_value, paste((t.test (s_auditory$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured visual
s_visual<-subset(all_structured, domain="visual")
category <- append(category, paste("structured visual"))
rt_p_value <- append(rt_p_value, paste((t.test (s_visual$rt_slope, mu =0, alternative= "less"))$p.value))
# Run t-tests for random values------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Subset random condition and convert rt_slope to numeric
all_random <- subset(rt_slope_t_test, type="random")
all_random$rt_slope <- as.numeric(all_random$rt_slope)
# t-test on random ssl
rlsl<-subset(all_random, task=LSL)
category <- append(category, paste("random LSL"))
rt_p_value <- append(rt_p_value, paste((t.test (rlsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random ssl
rssl<-subset(all_random, task=ssl)
category <- append(category, paste("random SSL"))
rt_p_value <- append(rt_p_value, paste((t.test (rssl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random tsl
rtsl<-subset(all_random, task=tsl)
category <- append(category, paste("random TSL"))
rt_p_value <- append(rt_p_value, paste((t.test (rtsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random vsl
rvsl<-subset(all_random, task=vsl)
category <- append(category, paste("random VSL"))
rt_p_value <- append(rt_p_value, paste((t.test (rvsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random non-linguistic
r_non_ling<-subset(all_random, modality="non-linguistic")
category <- append(category, paste("random non-linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (r_non_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random linguistic
r_ling<-subset(all_random, modality="linguistic")
category <- append(category, paste("random linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (r_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random auditory
r_auditory<-subset(all_random, domain="auditory")
category <- append(category, paste("random auditory"))
rt_p_value <- append(rt_p_value, paste((t.test (r_auditory$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random visual
r_visual<-subset(all_random, domain="visual")
category <- append(category, paste("random visual"))
rt_p_value <- append(rt_p_value, paste((t.test (r_visual$rt_slope, mu =0, alternative= "less"))$p.value))
# Combine into one data frame
rt_rt_p_values<- data.frame(category, acc_p_value, rt_p_value)
# Combine into one data frame
rt_rt_p_values<- data.frame(category, rt_p_value)
all_rt_p_values<- data.frame(category, rt_p_value)
View(all_rt_p_values)
View(all_rt)
category <- NULL
rt_p_value<- NULL
acc_p_value<- NULL
all_lsl<-subset(rt_slope_t_test, task=LSL)
category <- append(category, paste("lsl"))
rt_p_value <- append(rt_p_value, paste((t.test (all_lsl$rt_slope, mu =0, alternative= "less"))$p.value))
acc_p_value <- append(acc_p_value, paste((t.test(accuracy_t_test$LSL, mu = .5))$p.value))
View(all_lsl)
all_lsl<-subset(rt_slope_t_test, task=LSL)
category <- append(category, paste("LSL"))
rt_p_value <- append(rt_p_value, paste((t.test (all_lsl$rt_slope, mu =0, alternative= "less"))$p.value))
View(all_lsl)
View(rt_slope_t_test)
View(subset(rt_slope_t_test, task=LSL))
rt_slope_t_test<-all_rt
# t-test on all lsl
all_lsl<-subset(rt_slope_t_test, task="LSL")
category <- append(category, paste("LSL"))
rt_p_value <- append(rt_p_value, paste((t.test (all_lsl$rt_slope, mu =0, alternative= "less"))$p.value))
View(all_lsl)
category <- NULL
rt_p_value<- NULL
acc_p_value<- NULL
# Run t-tests for random/structured combined------------------------------------------------------------------------------------------------------------------------------------------------------------------------
rt_slope_t_test<-all_rt
# t-test on all lsl
all_lsl<-subset(rt_slope_t_test, task="LSL")
category <- append(category, paste("LSL"))
rt_p_value <- append(rt_p_value, paste((t.test (all_lsl$rt_slope, mu =0, alternative= "less"))$p.value))
View(all_lsl)
category <- NULL
rt_p_value<- NULL
acc_p_value<- NULL
# Run t-tests for random/structured combined------------------------------------------------------------------------------------------------------------------------------------------------------------------------
rt_slope_t_test<-all_rt
# t-test on all lsl
all_lsl<-subset(rt_slope_t_test, task=="LSL")
category <- append(category, paste("LSL"))
rt_p_value <- append(rt_p_value, paste((t.test (all_lsl$rt_slope, mu =0, alternative= "less"))$p.value))
View(all_lsl)
category <- NULL
rt_p_value<- NULL
acc_p_value<- NULL
# Run t-tests for random/structured combined------------------------------------------------------------------------------------------------------------------------------------------------------------------------
rt_slope_t_test<-all_rt
# t-test on all lsl
all_lsl<-subset(rt_slope_t_test, task=="LSL")
category <- append(category, paste("LSL"))
rt_p_value <- append(rt_p_value, paste((t.test (all_lsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on all ssl
all_ssl<-subset(rt_slope_t_test, task=="SSL")
category <- append(category, paste("SSL"))
rt_p_value <- append(rt_p_value, paste((t.test (all_ssl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on all tsl
all_tsl<-subset(rt_slope_t_test, task=="TSL")
category <- append(category, paste("TSL"))
rt_p_value <- append(rt_p_value, paste((t.test (all_tsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on all vsl
all_vsl<-subset(rt_slope_t_test, task=="VSL")
category <- append(category, paste("vsl"))
rt_p_value <- append(rt_p_value, paste((t.test (all_vsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on all non-linguistic
all_non_ling<-subset(rt_slope_t_test, modality=="non-linguistic")
category <- append(category, paste("non-linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (all_non_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on all linguistic
all_ling<-subset(rt_slope_t_test, modality=="linguistic")
category <- append(category, paste("linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (all_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on all auditory
all_auditory<-subset(rt_slope_t_test, domain=="auditory")
category <- append(category, paste("auditory"))
rt_p_value <- append(rt_p_value, paste((t.test (all_auditory$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on all visual
all_visual<-subset(rt_slope_t_test, domain=="visual")
category <- append(category, paste("visual"))
rt_p_value <- append(rt_p_value, paste((t.test (all_visual$rt_slope, mu =0, alternative= "less"))$p.value))
# Run t-tests for structured values------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Subset structured condition and convert rt_slope to numeric
all_structured <- subset(rt_slope_t_test, type="structured")
all_structured$rt_slope <- as.numeric(all_structured$rt_slope)
# t-test on structured ssl
slsl<-subset(all_structured, task=="LSL")
category <- append(category, paste("structured LSL"))
rt_p_value <- append(rt_p_value, paste((t.test (slsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured ssl
sssl<-subset(all_structured, task=="SSL")
category <- append(category, paste("structured SSL"))
rt_p_value <- append(rt_p_value, paste((t.test (sssl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random tsl
stsl<-subset(all_structured, task=="tsl")
category <- append(category, paste("structured TSL"))
rt_p_value <- append(rt_p_value, paste((t.test (stsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured vsl
svsl<-subset(all_structured, task=="vsl")
category <- append(category, paste("structured VSL"))
rt_p_value <- append(rt_p_value, paste((t.test (svsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured non-linguistic
s_non_ling<-subset(all_structured, modality=="non-linguistic")
category <- append(category, paste("structured non-linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (s_non_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured linguistic
s_ling<-subset(all_structured, modality=="linguistic")
category <- append(category, paste("structured linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (s_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured auditory
s_auditory<-subset(all_structured, domain=="auditory")
category <- append(category, paste("structured auditory"))
rt_p_value <- append(rt_p_value, paste((t.test (s_auditory$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on structured visual
s_visual<-subset(all_structured, domain=="visual")
category <- append(category, paste("structured visual"))
rt_p_value <- append(rt_p_value, paste((t.test (s_visual$rt_slope, mu =0, alternative= "less"))$p.value))
# Run t-tests for random values------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Subset random condition and convert rt_slope to numeric
all_random <- subset(rt_slope_t_test, type=="random")
all_random$rt_slope <- as.numeric(all_random$rt_slope)
# t-test on random ssl
rlsl<-subset(all_random, task=="LSL")
category <- append(category, paste("random LSL"))
rt_p_value <- append(rt_p_value, paste((t.test (rlsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random ssl
rssl<-subset(all_random, task=="SSL")
category <- append(category, paste("random SSL"))
rt_p_value <- append(rt_p_value, paste((t.test (rssl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random tsl
rtsl<-subset(all_random, task=="TSL")
category <- append(category, paste("random TSL"))
rt_p_value <- append(rt_p_value, paste((t.test (rtsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random vsl
rvsl<-subset(all_random, task=="VSL")
category <- append(category, paste("random VSL"))
rt_p_value <- append(rt_p_value, paste((t.test (rvsl$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random non-linguistic
r_non_ling<-subset(all_random, modality=="non-linguistic")
category <- append(category, paste("random non-linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (r_non_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random linguistic
r_ling<-subset(all_random, modality=="linguistic")
category <- append(category, paste("random linguistic"))
rt_p_value <- append(rt_p_value, paste((t.test (r_ling$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random auditory
r_auditory<-subset(all_random, domain=="auditory")
category <- append(category, paste("random auditory"))
rt_p_value <- append(rt_p_value, paste((t.test (r_auditory$rt_slope, mu =0, alternative= "less"))$p.value))
# t-test on random visual
r_visual<-subset(all_random, domain=="visual")
category <- append(category, paste("random visual"))
rt_p_value <- append(rt_p_value, paste((t.test (r_visual$rt_slope, mu =0, alternative= "less"))$p.value))
# Combine into one data frame
all_rt_p_values<- data.frame(category, rt_p_value)
rt_slope_t_test<-all_rt
# t-test on all lsl
all_lsl<-subset(rt_slope_t_test, task=="LSL")
category <- append(category, paste("LSL"))
rt_p_value <- append(rt_p_value, paste((t.test (all_lsl$rt_slope, mu =0, alternative= "less"))$p.value))
all_RT<- NULL
all_rt<-c(category, rt_p_value)
View(all_rt)
all_RT<- NULL
category <- NULL
rt_p_value<- NULL
acc_p_value<- NULL
all_rt<-c(category, rt_p_value)
View(all_rt)
all_rt <- data.frame
all_rt_names <- c("category", "rt_p_value")
colnames(all_rt) <- all_rt_names
all_rt <- data.frame(matrix(ncol = 2, nrow = 0))
all_rt_names <- c("category", "rt_p_value")
colnames(all_rt) <- all_rt_names
View(all_rt)
# t-test on all lsl
all_lsl<-subset(rt_slope_t_test, task=="LSL")
all_rt$category <- append(all_rt$category, paste("LSL"))
all_rt$rt_p_value <- append(all_rt$rt_p_value, paste((t.test (all_lsl$rt_slope, mu =0, alternative= "less"))$p.value))
rm(list=ls())
accuracy_t_test <- read.csv("~Desktop/accuracy_t_test.csv")
accuracy_t_test <- read.csv("~Desktop/accuracy_t_test.csv")
rm(list=ls())
accuracy_t_test <- read.csv("~Desktop/accuracy_t_test.csv")
accuracy_melt <- subset(accuracy_t_test,select=c(1:5))
accuracy_melt <- melt(accuracy_melt,id = 1)
colnames(accuracy_melt)[2]="task"
install.packages("PerformanceAnalytics")
install.packages("reshape")
install.packages("reshape2")
# Prepare workspace ------------------------------------------------------------------------------------------------------
library(PerformanceAnalytics)
library(reshape)
library(reshape2)
install.packages("PerformanceAnalytics")
rm(list=ls())
rm(list=ls())
rm(list=ls())
rm(list=ls())
accuracy_t_test <- read.csv("~Desktop/accuracy_t_test.csv")
accuracy_t_test <- read.csv("~Desktop/accuracy_t_test.csv")
accuracy_t_test <- read.csv("~Desktop/accuracy_t_test.csv")
accuracy_t_test <- read.csv("~Desktop/accuracy_t_test.csv")
accuracy_t_test <- read.csv("~Desktop/accuracy_t_test.csv/")
accuracy_t_test <- read.csv(file="~Desktop/accuracy_t_test.csv")
accuracy_t_test <- read.csv(file="~/Desktop/accuracy_t_test.csv")
accuracy_melt <- subset(accuracy_t_test,select=c(1:5))
accuracy_melt <- melt(accuracy_melt,id = 1)
colnames(accuracy_melt)[2]="task"
install.packages("PerformanceAnalytics")
install.packages("reshape")
install.packages("reshape2")
library(PerformanceAnalytics)
library(reshape)
library(reshape2)
rm(list=ls())
accuracy_t_test <- read.csv(file="~/Desktop/accuracy_t_test.csv")
accuracy_melt <- subset(accuracy_t_test,select=c(1:5))
accuracy_melt <- melt(accuracy_melt,id = 1)
colnames(accuracy_melt)[2]="task"
colnames(accuracy_melt)[3]="accuracy"
accuracy_melt$modalities = "visual"
accuracy_melt[accuracy_melt$task =="SSL" | accuracy_melt$task=="TSL",]$modalities = "auditory"
accuracy_melt$domains = "ling"
accuracy_melt[accuracy_melt$task =="TSL" | accuracy_melt$task=="VSL",]$domains = "nonling"
accuracy_melt_clean = accuracy_melt[complete.cases(accuracy_melt),]
Vie(accuracy_melt_clean)
View(accuracy_melt_clean)
rm(list=ls())
accuracy_t_test <- read.csv(file="~/Desktop/accuracy_6_runs.csv")
accuracy_melt <- subset(accuracy_t_test,select=c(1:5))
accuracy_melt <- melt(accuracy_melt,id = 1)
colnames(accuracy_melt)[2]="task"
colnames(accuracy_melt)[3]="accuracy"
accuracy_melt$modalities = "visual"
accuracy_melt[accuracy_melt$task =="SSL" | accuracy_melt$task=="TSL",]$modalities = "auditory"
accuracy_melt$domains = "ling"
accuracy_melt[accuracy_melt$task =="TSL" | accuracy_melt$task=="VSL",]$domains = "nonling"
accuracy_melt_clean = accuracy_melt[complete.cases(accuracy_melt),]
View(accuracy_melt_clean)
lsl_acc <- t.test( accuracy_t_test$LSL, mu = .5)
tsl_acc <- t.test( accuracy_t_test$TSL, mu = .5)
ssl_acc <- t.test( accuracy_t_test$SSL, mu = .5)
vsl_acc <- t.test( accuracy_t_test$VSL, mu = .5)
linguistic_acc <- t.test( accuracy_t_test$Linguistic, mu = .5)
non_linguistic_acc <- t.test( accuracy_t_test$Non_Linguistic, mu = .5)
visual_acc <- t.test( accuracy_t_test$Visual, mu = .5)
auditory_acc <- t.test( accuracy_t_test$Auditory, mu = .5)
p_values <- c(lsl_acc$p.value, tsl_acc$p.value, ssl_acc$p.value, vsl_acc$p.value, linguistic_acc$p.value, non_linguistic_acc$p.value, visual_acc$p.value, auditory_acc$p.value)
categories <- c("sl_acc", "tsl_acc", "ssl_acc", "vsl_acc", "linguistic_acc", "non_linguistic_acc", "visual_acc", "auditory_acc")
accuracies<- data.frame(categories, p_values)
lsl_acc <- t.test( accuracy_t_test$LSL, mu = .5)
View(accuracy_t_test)
category <- NULL
acc_p_value <- NULL
all_lsl<-subset(accuracy_t_test, task=LSL)
category <- append(category, paste("lsl"))
acc_p_value <- append(acc_p_value, paste((t.test(accuracy_t_test$LSL, mu = .5))$p.value))
View(category)
View(acc_p_value)
test<-t.test((accuracy_t_test$LSL, mu = .5))$p.value
test<-t.test(accuracy_t_test$LSL, mu = .5)
View(accuracy_t_test)
test<-t.test(all_lsl, mu = .5)
category <- NULL
acc_p_value <- NULL
all_lsl<-subset(accuracy_t_test, task=LSL)
category <- append(category, paste("lsl"))
acc_p_value <- append(acc_p_value, paste((t.test(all_lsl, mu = .5))$p.value))
rm(list=ls())
ll_input <- ("../../../sit_data/clean/ll_clean/")
lv_input <- ("../../../sit_data/clean/lv_clean/")
vl_input <- ("../../../sit_data/clean/vl_clean/")
vv_input <- ("../../../sit_data/clean/vv_clean/")
ll_underscore_files <- list.files(path=ll_input, pattern = ".csv")
ll_files <- gsub("_", "", ll_underscore_files)
ll_data_frame<-list()
for(file in ll_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(ll_input, file, sep="")))
}
for (file in ll_files){ll_data_frame <- append(ll_data_frame, list(eval(parse(text=file))))}
ll_data_frame <- do.call(rbind.data.frame, ll_data_frame)
levels(ll_data_frame$structured_targ)[levels(ll_data_frame$structured_targ)=="f_not_false"] <- "F"
levels(ll_data_frame$random_targ)[levels(ll_data_frame$random_targ)=="f_not_false"] <- "F"
ll_data_frame$image <- gsub (".png", "", ll_data_frame$image, ignore.case=TRUE)
lv_underscore_files <- list.files(path=lv_input, pattern = ".csv")
lv_files <- gsub("_", "", lv_underscore_files)
setwd(
"Documents/qlab/analysis/sit-beh-analysis"
)
rm(list=ls())
ll_input <- ("../../../sit_data/clean/ll_clean/")
lv_input <- ("../../../sit_data/clean/lv_clean/")
vl_input <- ("../../../sit_data/clean/vl_clean/")
vv_input <- ("../../../sit_data/clean/vv_clean/")
ll_underscore_files <- list.files(path=ll_input, pattern = ".csv")
ll_files <- gsub("_", "", ll_underscore_files)
ll_data_frame<-list()
for(file in ll_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(ll_input, file, sep="")))
}
for (file in ll_files){ll_data_frame <- append(ll_data_frame, list(eval(parse(text=file))))}
ll_data_frame <- do.call(rbind.data.frame, ll_data_frame)
levels(ll_data_frame$structured_targ)[levels(ll_data_frame$structured_targ)=="f_not_false"] <- "F"
levels(ll_data_frame$random_targ)[levels(ll_data_frame$random_targ)=="f_not_false"] <- "F"
ll_data_frame$image <- gsub (".png", "", ll_data_frame$image, ignore.case=TRUE)
View(ll_data_frame)
lv_underscore_files <- list.files(path=lv_input, pattern = ".csv")
lv_underscore_files
lv_files <- gsub("_", "", lv_underscore_files)
lv_files
lv_data_frame<-list()
lv_data_frame
# Remove the dashes in each file name read it in
for(file in lv_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(lv_input, file, sep="")))
}
lv_files
for (file in lv_files){lv_data_frame <- append(lv_data_frame, list(eval(parse(text=file))))}
lv_data_frame <- do.call(rbind.data.frame, lv_data_frame)
lv_data_frame
lv_data_frame$random_targ<-toString(lv_data_frame$random_targ)
View(lv_data_frame)
