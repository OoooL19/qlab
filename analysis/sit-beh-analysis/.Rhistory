View(typeof(list_part_id))
list_part_id <- unique(ll_data_frame$part_id)
list_part_id
list_part_id <- as.string(unique(ll_data_frame$part_id))
list_part_id <- as.character(unique(ll_data_frame$part_id))
list_part_id
# List unique participant IDs for this condition
list_part_id <- as.character(unique(ll_data_frame$part_id))
#test
View(typeof(list_part_id))
# Remove objects in environment
rm(list=ls())
#For use on Mac
ll_input <- ("../../../sit_data/clean/ll_clean/")
lv_input <- ("../../../sit_data/clean/lv_clean/")
vl_input <- ("../../../sit_data/clean/vl_clean/")
vv_input <- ("../../../sit_data/clean/vv_clean/")
ll_underscore_files <- list.files(path=ll_input, pattern = ".csv")
#Remove the underscores in file names
ll_files <- gsub("_", "", ll_underscore_files)
# Prepare data_frame to hold the files you're reading in
ll_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in ll_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(ll_input, file, sep="")))
}
# Combine each file with the previous files into ll_data_frame
for (file in ll_files){ll_data_frame <- append(ll_data_frame, list(eval(parse(text=file))))}
ll_data_frame <- do.call(rbind.data.frame, ll_data_frame)
# Read "f_not_false" as "F"
levels(ll_data_frame$structured_targ)[levels(ll_data_frame$structured_targ)=="f_not_false"] <- "F"
levels(ll_data_frame$random_targ)[levels(ll_data_frame$random_targ)=="f_not_false"] <- "F"
# Remove .png from image names
ll_data_frame$image <- gsub (".png", "", ll_data_frame$image, ignore.case=TRUE)
lv_underscore_files <- list.files(path=lv_input, pattern = ".csv")
#Remove the underscores in file names
lv_files <- gsub("_", "", lv_underscore_files)
# Prepare data_frame to hold the files you're reading in
lv_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in lv_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(lv_input, file, sep="")))
}
# Combine each file with the previous files into lv_data_frame
for (file in lv_files){lv_data_frame <- append(lv_data_frame, list(eval(parse(text=file))))}
lv_data_frame <- do.call(rbind.data.frame, lv_data_frame)
#convert targets to string
lv_data_frame$random_targ<-toString(lv_data_frame$random_targ)
lv_data_frame$structured_targ<-toString(lv_data_frame$structured_targ)
# Remove .png from image names
lv_data_frame$image <- gsub (".png", "", lv_data_frame$image, ignore.case=TRUE)
vl_underscore_files <- list.files(path=vl_input, pattern = ".csv")
#Remove the underscores in file names
vl_files <- gsub("_", "", vl_underscore_files)
# Prepare data_frame to hold the files you're reading in
vl_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in vl_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(vl_input, file, sep="")))
}
# Combine each file with the previous files into vl_data_frame
for (file in vl_files){vl_data_frame <- append(vl_data_frame, list(eval(parse(text=file))))}
vl_data_frame <- do.call(rbind.data.frame, vl_data_frame)
#convert targets to string
vl_data_frame$random_targ<-toString(vl_data_frame$random_targ)
vl_data_frame$structured_targ<-toString(vl_data_frame$structured_targ)
# Remove .png from image names
vl_data_frame$image <- gsub (".png", "", vl_data_frame$image, ignore.case=TRUE)
vv_underscore_files <- list.files(path=vv_input, pattern = ".csv")
#Remove the underscores in file names
vv_files <- gsub("_", "", vv_underscore_files)
# Prepare data_frame to hold the files you're reading in
vv_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in vv_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(vv_input, file, sep="")))
}
# Combine each file with the previous files into vv_data_frame
for (file in vv_files){vv_data_frame <- append(vv_data_frame, list(eval(parse(text=file))))}
vv_data_frame <- do.call(rbind.data.frame, vv_data_frame)
#convert targets to string
vv_data_frame$random_targ<-toString(vv_data_frame$random_targ)
vv_data_frame$structured_targ<-toString(vv_data_frame$structured_targ)
# Remove .png from image names
vv_data_frame$image <- gsub (".png", "", vv_data_frame$image, ignore.case=TRUE)
# Separate random and structured conditions
random_ll <- ll_data_frame[ which(ll_data_frame$condition== "R"),]
structured_ll <- ll_data_frame[ which(ll_data_frame$condition== "S"),]
# List unique participant IDs for this condition
list_part_id <- as.character(unique(ll_data_frame$part_id))
# Find the number of images shown to each participant
random_images_per_participant <- NULL
for(i in list_part_id){random_images_per_participant <- append(random_images_per_participant,sum(random_ll$part_id==i))}
#for testing purposes
id_test <- cbind(random_images_per_participant, list_part_id)
# For each participant, index the images
image_index <- NULL
for (i in random_images_per_participant) {image_index <- append (image_index, rep(1:random_images_per_participant, 1))}
# Add the targets' indices
random_ll$image_index <- image_index
#  SIT RT Slope Cleaning
#  Violet Kozloff
#  April 8th 2018
#  This script cleans the auditory and visual files from the 4-run pilot for reaction time slope analysis
#  ****************************************************************************
# Prepare files ------------------------------------------------------------
# Remove objects in environment
rm(list=ls())
# Set working directory
setwd("Documents/qlab/analysis/sit-beh-analysis/")
# Set up file paths
ll_input <- ("../../../sit_data/original/ll_original/")
lv_input <- ("../../../sit_data/original/lv_original/")
vl_input <- ("../../../sit_data/original/vl_original/")
vv_input <- ("../../../sit_data/original/vv_original/")
ll_output <- ("../../../sit_data/clean/ll_clean/")
lv_output <- ("../../../sit_data/clean/lv_clean/")
vl_output <- ("../../../sit_data/clean/vl_clean/")
vv_output <- ("../../../sit_data/clean/vv_clean/")
ll_files<- list.files(path = ll_input, pattern="*.csv")
ll_output_files <- list.files(path = ll_output, pattern="*.csv")
lv_files<- list.files(path = lv_input, pattern="*.csv")
vl_files<- list.files(path = vl_input, pattern="*.csv")
vv_files<- list.files(path = vv_input, pattern="*.csv")
# Clean files with an lsl test phase --------------------------------------------------------------------------------
# create a new file containing only the relevant columns in the output folder
ll_clean <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("PartID", "trialnum", "expName", "condition", "l_block_trial_loop.thisTrialN", "image","first_targ", "second_targ","l_block_trial_key_resp.rt","lsl_question_key_resp.corr")
newdata <- current_file[value]
# Make sure that F is not marked as False
newdata$first_targ[newdata$first_targ == FALSE] <- 'f_not_false'
newdata$second_targ[newdata$second_targ == FALSE] <- 'f_not_false'
# Put all data in lowercase
names(newdata) <- tolower(names(newdata))
# Standardize "corr_resp" column across runs
names(newdata)[names(newdata) == 'lsl_question_key_resp.corr'] <- 'corr_resp'
# Simplify loop names
names(newdata)[names(newdata) == 'l_block_trial_loop.thisTrialN'] <- 'this_l_loop'
# Separate words by underscore
names(newdata) <- gsub ("partid", "part_id", names(newdata))
names(newdata) <- gsub ("expname", "exp_name", names(newdata))
names(newdata) <- gsub ("trialnum", "trial_num", names(newdata))
# Define targets by condition
names(newdata) <- gsub ("first_targ", "structured_targ", names(newdata))
names(newdata) <- gsub ("second_targ", "random_targ", names(newdata))
# Define targets by condition
names(newdata) <- gsub ("first_targ", "structured_targ", names(newdata))
names(newdata) <- gsub ("second_targ", "random_targ", names(newdata))
# Write file
this_path<-file.path(ll_output, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all ll files
for (file in ll_files)
{
ll_clean(paste0(ll_input,file))
}
warn# create a new file containing only the relevant columns in the output folder
lv_clean <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("PartID", "expName", "trialnum", "condition", "l_block_trial_loop.thisTrialN", "v_block_trial_loop.thisTrialN", "image","first_targ", "second_targ","l_block_trial_key_resp.rt", "v_block_trial_key_resp.rt","lsl_question_key_resp.corr")
newdata <- current_file[value]
# Make sure that F is not marked as False
newdata$first_targ[newdata$first_targ == FALSE] <- 'f_not_false'
# Put all data in lowercase
names(newdata) <- tolower(names(newdata))
# Standardize "corr_resp" column across runs
names(newdata)[names(newdata) == 'lsl_question_key_resp.corr'] <- 'corr_resp'
# Simplify loop names
names(newdata)[names(newdata) == 'l_block_trial_loop.thisTrialN'] <- 'this_l_loop'
names(newdata)[names(newdata) == 'v_block_trial_loop.thisTrialN'] <- 'this_v_loop'
# Separate words by underscore
names(newdata) <- gsub ("partid", "part_id", names(newdata))
names(newdata) <- gsub ("expname", "exp_name", names(newdata))
names(newdata) <- gsub ("expname", "trial_name", names(newdata))
# Define targets by condition
names(newdata) <- gsub ("first_targ", "structured_targ", names(newdata))
names(newdata) <- gsub ("second_targ", "random_targ", names(newdata))
# Write file
this_path<-file.path(lv_output, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all lv files
for (file in lv_files)
{
lv_clean(paste0(lv_input,file))
}
# Clean files with a vsl test phase --------------------------------------------------------------------------------
# create a new file containing only the relevant columns in the output folder
vl_clean <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("PartID", "trialnum", "expName", "condition", "l_block_trial_loop.thisTrialN", "v_block_trial_loop.thisTrialN", "image","first_targ", "second_targ","l_block_trial_key_resp.rt","v_block_trial_key_resp.rt", "vsl_question_key_resp.corr")
newdata <- current_file[value]
# Make sure that F is not marked as False
newdata$second_targ[newdata$second_targ == FALSE] <- 'f_not_false'
# Put all data in lowercase
names(newdata) <- tolower(names(newdata))
# Standardize "corr_resp" column across runs
names(newdata)[names(newdata) == 'vsl_question_key_resp.corr'] <- 'corr_resp'
# Simplify loop names
names(newdata)[names(newdata) == 'l_block_trial_loop.thisTrialN'] <- 'this_l_loop'
names(newdata)[names(newdata) == 'v_block_trial_loop.thisTrialN'] <- 'this_v_loop'
# Separate words by underscore
names(newdata) <- gsub ("partid", "part_id", names(newdata))
names(newdata) <- gsub ("expname", "exp_name", names(newdata))
names(newdata) <- gsub ("trialnum", "trial_num", names(newdata))
# Define targets by condition
names(newdata) <- gsub ("first_targ", "structured_targ", names(newdata))
names(newdata) <- gsub ("second_targ", "random_targ", names(newdata))
# Write file
this_path<-file.path(vl_output, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all vl files
for (file in vl_files)
{
vl_clean(paste0(vl_input,file))
}
# create a new file containing only the relevant columns in the output folder
vv_clean <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("PartID", "expName", "trialnum", "condition", "v_block_trial_loop.thisTrialN", "image", "first_targ", "second_targ","v_block_trial_key_resp.rt", "vsl_question_key_resp.corr")
newdata <- current_file[value]
# Standardize "corr_resp" column across runs
names(newdata)[names(newdata) == 'vsl_question_key_resp.corr'] <- 'corr_resp'
# Simplify loop names
names(newdata)[names(newdata) == 'v_block_trial_loop.thisTrialN'] <- 'this_v_loop'
# Put all data in lowercase
names(newdata) <- tolower(names(newdata))
# Separate words by underscore
names(newdata) <- gsub ("partid", "part_id", names(newdata))
names(newdata) <- gsub ("expname", "exp_name", names(newdata))
names(newdata) <- gsub ("trialnum", "trial_num", names(newdata))
# Write file
this_path<-file.path(vv_output, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all vv files
for (file in vv_files)
{
vv_clean(paste0(vv_input,file))
}
# Remove objects in environment
rm(list=ls())
# Set working directory
setwd("Documents/qlab/analysis/sit-beh-analysis/")
# Set up file paths
ll_input <- ("../../../sit_data/original/ll_original/")
lv_input <- ("../../../sit_data/original/lv_original/")
vl_input <- ("../../../sit_data/original/vl_original/")
vv_input <- ("../../../sit_data/original/vv_original/")
ll_output <- ("../../../sit_data/clean/ll_clean/")
lv_output <- ("../../../sit_data/clean/lv_clean/")
vl_output <- ("../../../sit_data/clean/vl_clean/")
vv_output <- ("../../../sit_data/clean/vv_clean/")
ll_files<- list.files(path = ll_input, pattern="*.csv")
ll_output_files <- list.files(path = ll_output, pattern="*.csv")
lv_files<- list.files(path = lv_input, pattern="*.csv")
vl_files<- list.files(path = vl_input, pattern="*.csv")
vv_files<- list.files(path = vv_input, pattern="*.csv")
# create a new file containing only the relevant columns in the output folder
ll_clean <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("PartID", "trialnum", "expName", "condition", "l_block_trial_loop.thisTrialN", "image","first_targ", "second_targ","l_block_trial_key_resp.rt","lsl_question_key_resp.corr")
newdata <- current_file[value]
# Make sure that F is not marked as False
newdata$first_targ[newdata$first_targ == FALSE] <- 'f_not_false'
newdata$second_targ[newdata$second_targ == FALSE] <- 'f_not_false'
# Put all data in lowercase
names(newdata) <- tolower(names(newdata))
# Standardize "corr_resp" column across runs
names(newdata)[names(newdata) == 'lsl_question_key_resp.corr'] <- 'corr_resp'
# Simplify loop names
names(newdata)[names(newdata) == 'l_block_trial_loop.thisTrialN'] <- 'this_l_loop'
# Separate words by underscore
names(newdata) <- gsub ("partid", "part_id", names(newdata))
names(newdata) <- gsub ("expname", "exp_name", names(newdata))
names(newdata) <- gsub ("trialnum", "trial_num", names(newdata))
# Define targets by condition
names(newdata) <- gsub ("first_targ", "structured_targ", names(newdata))
names(newdata) <- gsub ("second_targ", "random_targ", names(newdata))
# Define targets by condition
names(newdata) <- gsub ("first_targ", "structured_targ", names(newdata))
names(newdata) <- gsub ("second_targ", "random_targ", names(newdata))
# Write file
this_path<-file.path(ll_output, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all ll files
for (file in ll_files)
#  SIT RT Slope Cleaning
#  Violet Kozloff
#  April 8th 2018
#  This script cleans the auditory and visual files from the 4-run pilot for reaction time slope analysis
#  ****************************************************************************
# Prepare files ------------------------------------------------------------
# Remove objects in environment
rm(list=ls())
# Set working directory
setwd("Documents/qlab/analysis/sit-beh-analysis/")
# Set up file paths
ll_input <- ("../../../sit_data/original/ll_original/")
lv_input <- ("../../../sit_data/original/lv_original/")
vl_input <- ("../../../sit_data/original/vl_original/")
vv_input <- ("../../../sit_data/original/vv_original/")
ll_output <- ("../../../sit_data/clean/ll_clean/")
lv_output <- ("../../../sit_data/clean/lv_clean/")
vl_output <- ("../../../sit_data/clean/vl_clean/")
vv_output <- ("../../../sit_data/clean/vv_clean/")
ll_files<- list.files(path = ll_input, pattern="*.csv")
ll_output_files <- list.files(path = ll_output, pattern="*.csv")
lv_files<- list.files(path = lv_input, pattern="*.csv")
vl_files<- list.files(path = vl_input, pattern="*.csv")
vv_files<- list.files(path = vv_input, pattern="*.csv")
# Clean files with an lsl test phase --------------------------------------------------------------------------------
# create a new file containing only the relevant columns in the output folder
ll_clean <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("PartID", "trialnum", "expName", "condition", "l_block_trial_loop.thisTrialN", "image","first_targ", "second_targ","l_block_trial_key_resp.rt","lsl_question_key_resp.corr")
newdata <- current_file[value]
# Make sure that F is not marked as False
newdata$first_targ[newdata$first_targ == FALSE] <- 'f_not_false'
newdata$second_targ[newdata$second_targ == FALSE] <- 'f_not_false'
# Put all data in lowercase
names(newdata) <- tolower(names(newdata))
# Standardize "corr_resp" column across runs
names(newdata)[names(newdata) == 'lsl_question_key_resp.corr'] <- 'corr_resp'
# Simplify loop names
names(newdata)[names(newdata) == 'l_block_trial_loop.thisTrialN'] <- 'this_l_loop'
# Separate words by underscore
names(newdata) <- gsub ("partid", "part_id", names(newdata))
names(newdata) <- gsub ("expname", "exp_name", names(newdata))
names(newdata) <- gsub ("trialnum", "trial_num", names(newdata))
# Define targets by condition
names(newdata) <- gsub ("first_targ", "structured_targ", names(newdata))
names(newdata) <- gsub ("second_targ", "random_targ", names(newdata))
# Define targets by condition
names(newdata) <- gsub ("first_targ", "structured_targ", names(newdata))
names(newdata) <- gsub ("second_targ", "random_targ", names(newdata))
# Write file
this_path<-file.path(ll_output, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all ll files
for (file in ll_files)
{
ll_clean(paste0(ll_input,file))
}
warnings()
lv_clean <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("PartID", "expName", "trialnum", "condition", "l_block_trial_loop.thisTrialN", "v_block_trial_loop.thisTrialN", "image","first_targ", "second_targ","l_block_trial_key_resp.rt", "v_block_trial_key_resp.rt","lsl_question_key_resp.corr")
newdata <- current_file[value]
# Make sure that F is not marked as False
newdata$first_targ[newdata$first_targ == FALSE] <- 'f_not_false'
# Put all data in lowercase
names(newdata) <- tolower(names(newdata))
# Standardize "corr_resp" column across runs
names(newdata)[names(newdata) == 'lsl_question_key_resp.corr'] <- 'corr_resp'
# Simplify loop names
names(newdata)[names(newdata) == 'l_block_trial_loop.thisTrialN'] <- 'this_l_loop'
names(newdata)[names(newdata) == 'v_block_trial_loop.thisTrialN'] <- 'this_v_loop'
# Separate words by underscore
names(newdata) <- gsub ("partid", "part_id", names(newdata))
names(newdata) <- gsub ("expname", "exp_name", names(newdata))
names(newdata) <- gsub ("expname", "trial_name", names(newdata))
# Define targets by condition
names(newdata) <- gsub ("first_targ", "structured_targ", names(newdata))
names(newdata) <- gsub ("second_targ", "random_targ", names(newdata))
# Write file
this_path<-file.path(lv_output, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all lv files
for (file in lv_files)
{
lv_clean(paste0(lv_input,file))
}
# Remove objects in environment
rm(list=ls())
# Set working directory
setwd("Documents/qlab/analysis/sit-beh-analysis/")
# Set up file paths
ll_input <- ("../../../sit_data/original/ll_original/")
lv_input <- ("../../../sit_data/original/lv_original/")
vl_input <- ("../../../sit_data/original/vl_original/")
vv_input <- ("../../../sit_data/original/vv_original/")
ll_output <- ("../../../sit_data/clean/ll_clean/")
lv_output <- ("../../../sit_data/clean/lv_clean/")
vl_output <- ("../../../sit_data/clean/vl_clean/")
vv_output <- ("../../../sit_data/clean/vv_clean/")
ll_files<- list.files(path = ll_input, pattern="*.csv")
ll_output_files <- list.files(path = ll_output, pattern="*.csv")
lv_files<- list.files(path = lv_input, pattern="*.csv")
vl_files<- list.files(path = vl_input, pattern="*.csv")
vv_files<- list.files(path = vv_input, pattern="*.csv")
# create a new file containing only the relevant columns in the output folder
ll_clean <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("PartID", "trialnum", "expName", "condition", "l_block_trial_loop.thisTrialN", "image","first_targ", "second_targ","l_block_trial_key_resp.rt","lsl_question_key_resp.corr")
newdata <- current_file[value]
# Make sure that F is not marked as False
newdata$first_targ[newdata$first_targ == FALSE] <- 'f_not_false'
newdata$second_targ[newdata$second_targ == FALSE] <- 'f_not_false'
# Put all data in lowercase
names(newdata) <- tolower(names(newdata))
# Standardize "corr_resp" column across runs
names(newdata)[names(newdata) == 'lsl_question_key_resp.corr'] <- 'corr_resp'
# Simplify loop names
names(newdata)[names(newdata) == 'l_block_trial_loop.thisTrialN'] <- 'this_l_loop'
# Separate words by underscore
names(newdata) <- gsub ("partid", "part_id", names(newdata))
names(newdata) <- gsub ("expname", "exp_name", names(newdata))
names(newdata) <- gsub ("trialnum", "trial_num", names(newdata))
# Define targets by condition
names(newdata) <- gsub ("first_targ", "structured_targ", names(newdata))
names(newdata) <- gsub ("second_targ", "random_targ", names(newdata))
# Define targets by condition
names(newdata) <- gsub ("first_targ", "structured_targ", names(newdata))
names(newdata) <- gsub ("second_targ", "random_targ", names(newdata))
# Write file
this_path<-file.path(ll_output, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all ll files
for (file in ll_files)
{
ll_clean(paste0(ll_input,file))
}
warn# create a new file containing only the relevant columns in the output folder
lv_clean <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("PartID", "expName", "trialnum", "condition", "l_block_trial_loop.thisTrialN", "v_block_trials_loop.thisTrialN", "image","first_targ", "second_targ","l_block_trial_key_resp.rt", "v_block_trials_key_resp.rt","lsl_question_key_resp.corr")
newdata <- current_file[value]
# Make sure that F is not marked as False
newdata$first_targ[newdata$first_targ == FALSE] <- 'f_not_false'
# Put all data in lowercase
names(newdata) <- tolower(names(newdata))
# Standardize "corr_resp" column across runs
names(newdata)[names(newdata) == 'lsl_question_key_resp.corr'] <- 'corr_resp'
# Simplify loop names
names(newdata)[names(newdata) == 'l_block_trial_loop.thisTrialN'] <- 'this_l_loop'
names(newdata)[names(newdata) == 'v_block_trials_loop.thisTrialN'] <- 'this_v_loop'
# Separate words by underscore
names(newdata) <- gsub ("partid", "part_id", names(newdata))
names(newdata) <- gsub ("expname", "exp_name", names(newdata))
names(newdata) <- gsub ("expname", "trial_name", names(newdata))
# Define targets by condition
names(newdata) <- gsub ("first_targ", "structured_targ", names(newdata))
names(newdata) <- gsub ("second_targ", "random_targ", names(newdata))
# Write file
this_path<-file.path(lv_output, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all lv files
for (file in lv_files)
{
lv_clean(paste0(lv_input,file))
}
# create a new file containing only the relevant columns in the output folder
lv_clean <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("PartID", "expName", "trialnum", "condition", "l_block_trial_loop.thisTrialN", "v_block_trials.thisTrialN", "image","first_targ", "second_targ","l_block_trial_key_resp.rt", "v_block_trials_key_resp.rt","lsl_question_key_resp.corr")
newdata <- current_file[value]
# Make sure that F is not marked as False
newdata$first_targ[newdata$first_targ == FALSE] <- 'f_not_false'
# Put all data in lowercase
names(newdata) <- tolower(names(newdata))
# Standardize "corr_resp" column across runs
names(newdata)[names(newdata) == 'lsl_question_key_resp.corr'] <- 'corr_resp'
# Simplify loop names
names(newdata)[names(newdata) == 'l_block_trial_loop.thisTrialN'] <- 'this_l_loop'
names(newdata)[names(newdata) == 'v_block_trials.thisTrialN'] <- 'this_v_loop'
# Separate words by underscore
names(newdata) <- gsub ("partid", "part_id", names(newdata))
names(newdata) <- gsub ("expname", "exp_name", names(newdata))
names(newdata) <- gsub ("expname", "trial_name", names(newdata))
# Define targets by condition
names(newdata) <- gsub ("first_targ", "structured_targ", names(newdata))
names(newdata) <- gsub ("second_targ", "random_targ", names(newdata))
# Write file
this_path<-file.path(lv_output, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all lv files
for (file in lv_files)
{
lv_clean(paste0(lv_input,file))
}
