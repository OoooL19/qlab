ll_underscore_files <- list.files(path=ll_input, pattern = ".csv")
#Remove the underscores in file names
ll_files <- gsub("_", "", ll_underscore_files)
# Prepare data_frame to hold the files you're reading in
ll_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in ll_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(ll_input, file, sep="")))
}
# Combine each file with the previous files into ll_data_frame
for (file in ll_files){ll_data_frame <- append(ll_data_frame, list(eval(parse(text=file))))}
ll_data_frame <- do.call(rbind.data.frame, ll_data_frame)
#convert targets to string
ll_data_frame$random_targ<-toString(ll_data_frame$random_targ)
ll_data_frame$structured_targ<-toString(ll_data_frame$structured_targ)
# to test
#r_targs_before <- unique(ll_data_frame$random_targ)
#s_targs_before <- unique(ll_data_frame$structured_targ)
# Read "f_not_false" as "F"
ll_data_frame$random_targ[ll_data_frame$random_targ == 'f_not_false'] <- 'F'
ll_data_frame$structured_targ[ll_data_frame$structured_targ == 'f_not_false'] <- 'F'
# to test
r_targs_after <- unique(ll_data_frame$random_targ)
s_targs_after <- unique(ll_data_frame$structured_targ)
# Remove .png from image names
ll_data_frame$image <- gsub (".png", "", ll_data_frame$image, ignore.case=TRUE)
lv_underscore_files <- list.files(path=lv_input, pattern = ".csv")
l_targs_before
View(r_targs_before)
# TO DO : Did participants see the first_targ during the structured condition and second_targ during the random condition?
# TO DO: Also, are we including reaction times for responses during the stimuli preceding/ following for l and v trials?
# TO DO: Remove points outside 2.5 Stdev of mean?
# TO DO: Image index in a way that accounts for different repetitions of S/R blocks. EG: participant A's two R blocks are merged.
# he doesn't respond during the last target of an S block, which is the last stimulus, so we take his reaction time from the
# following stimulus (which is actually the first stimulus of the next S block)
# ******************** I. PREPARE FILES *************************
# Prepare workspace ------------------------------------------------------------------------------------------------------
# Remove objects in environment
rm(list=ls())
# Prepare paths for files --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Prepare paths for files --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#For use on Mac
ll_input <- ("../../../sit_data/clean/ll_clean/")
lv_input <- ("../../../sit_data/clean/lv_clean/")
vl_input <- ("../../../sit_data/clean/vl_clean/")
vv_input <- ("../../../sit_data/clean/vv_clean/")
# Read in ll files and combine them into one data frame -----------------------------------------------------------------------------------------------------------------------------------
ll_underscore_files <- list.files(path=ll_input, pattern = ".csv")
#Remove the underscores in file names
ll_files <- gsub("_", "", ll_underscore_files)
# Prepare data_frame to hold the files you're reading in
ll_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in ll_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(ll_input, file, sep="")))
}
# Combine each file with the previous files into ll_data_frame
for (file in ll_files){ll_data_frame <- append(ll_data_frame, list(eval(parse(text=file))))}
ll_data_frame <- do.call(rbind.data.frame, ll_data_frame)
#convert targets to string
ll_data_frame$random_targ<-toString(ll_data_frame$random_targ)
ll_data_frame$structured_targ<-toString(ll_data_frame$structured_targ)
# to test
r_targs_before <- unique(ll_data_frame$random_targ)
s_targs_before <- unique(ll_data_frame$structured_targ)
# Read "f_not_false" as "F"
ll_data_frame$random_targ[ll_data_frame$random_targ == 'f_not_false'] <- 'F'
ll_data_frame$structured_targ[ll_data_frame$structured_targ == 'f_not_false'] <- 'F'
# to test
r_targs_after <- unique(ll_data_frame$random_targ)
s_targs_after <- unique(ll_data_frame$structured_targ)
View(r_targs_before)
# Remove objects in environment
rm(list=ls())
#For use on Mac
ll_input <- ("../../../sit_data/clean/ll_clean/")
lv_input <- ("../../../sit_data/clean/lv_clean/")
vl_input <- ("../../../sit_data/clean/vl_clean/")
vv_input <- ("../../../sit_data/clean/vv_clean/")
ll_underscore_files <- list.files(path=ll_input, pattern = ".csv")
#Remove the underscores in file names
ll_files <- gsub("_", "", ll_underscore_files)
# Prepare data_frame to hold the files you're reading in
ll_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in ll_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(ll_input, file, sep="")))
}
# Combine each file with the previous files into ll_data_frame
for (file in ll_files){ll_data_frame <- append(ll_data_frame, list(eval(parse(text=file))))}
ll_data_frame <- do.call(rbind.data.frame, ll_data_frame)
#convert targets to string
ll_data_frame$random_targ<-toString(ll_data_frame$random_targ)
ll_data_frame$structured_targ<-toString(ll_data_frame$structured_targ)
# to test
r_targs_before <- unique(ll_data_frame$random_targ)
s_targs_before <- unique(ll_data_frame$structured_targ)
# TO DO : Did participants see the first_targ during the structured condition and second_targ during the random condition?
# TO DO: Also, are we including reaction times for responses during the stimuli preceding/ following for l and v trials?
# TO DO: Remove points outside 2.5 Stdev of mean?
# TO DO: Image index in a way that accounts for different repetitions of S/R blocks. EG: participant A's two R blocks are merged.
# he doesn't respond during the last target of an S block, which is the last stimulus, so we take his reaction time from the
# following stimulus (which is actually the first stimulus of the next S block)
# ******************** I. PREPARE FILES *************************
# Prepare workspace ------------------------------------------------------------------------------------------------------
# Remove objects in environment
rm(list=ls())
# Prepare paths for files --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Prepare paths for files --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#For use on Mac
ll_input <- ("../../../sit_data/clean/ll_clean/")
lv_input <- ("../../../sit_data/clean/lv_clean/")
vl_input <- ("../../../sit_data/clean/vl_clean/")
vv_input <- ("../../../sit_data/clean/vv_clean/")
# Read in ll files and combine them into one data frame -----------------------------------------------------------------------------------------------------------------------------------
ll_underscore_files <- list.files(path=ll_input, pattern = ".csv")
#Remove the underscores in file names
ll_files <- gsub("_", "", ll_underscore_files)
# Prepare data_frame to hold the files you're reading in
ll_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in ll_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(ll_input, file, sep="")))
}
# Combine each file with the previous files into ll_data_frame
for (file in ll_files){ll_data_frame <- append(ll_data_frame, list(eval(parse(text=file))))}
ll_data_frame <- do.call(rbind.data.frame, ll_data_frame)
# to test
r_targs_before <- unique(ll_data_frame$random_targ)
s_targs_before <- unique(ll_data_frame$structured_targ)
# Read "f_not_false" as "F"
ll_data_frame$random_targ[ll_data_frame$random_targ == 'f_not_false'] <- 'F'
ll_data_frame$structured_targ[ll_data_frame$structured_targ == 'f_not_false'] <- 'F'
# TO DO : Did participants see the first_targ during the structured condition and second_targ during the random condition?
# TO DO: Also, are we including reaction times for responses during the stimuli preceding/ following for l and v trials?
# TO DO: Remove points outside 2.5 Stdev of mean?
# TO DO: Image index in a way that accounts for different repetitions of S/R blocks. EG: participant A's two R blocks are merged.
# he doesn't respond during the last target of an S block, which is the last stimulus, so we take his reaction time from the
# following stimulus (which is actually the first stimulus of the next S block)
# ******************** I. PREPARE FILES *************************
# Prepare workspace ------------------------------------------------------------------------------------------------------
# Remove objects in environment
rm(list=ls())
# Prepare paths for files --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Prepare paths for files --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#For use on Mac
ll_input <- ("../../../sit_data/clean/ll_clean/")
lv_input <- ("../../../sit_data/clean/lv_clean/")
vl_input <- ("../../../sit_data/clean/vl_clean/")
vv_input <- ("../../../sit_data/clean/vv_clean/")
# Read in ll files and combine them into one data frame -----------------------------------------------------------------------------------------------------------------------------------
ll_underscore_files <- list.files(path=ll_input, pattern = ".csv")
#Remove the underscores in file names
ll_files <- gsub("_", "", ll_underscore_files)
# Prepare data_frame to hold the files you're reading in
ll_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in ll_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(ll_input, file, sep="")))
}
# Combine each file with the previous files into ll_data_frame
for (file in ll_files){ll_data_frame <- append(ll_data_frame, list(eval(parse(text=file))))}
ll_data_frame <- do.call(rbind.data.frame, ll_data_frame)
# to test
r_targs_before <- unique(ll_data_frame$random_targ)
s_targs_before <- unique(ll_data_frame$structured_targ)
# Read "f_not_false" as "F"
ll_data_frame$random_targ[ll_data_frame$random_targ == f_not_false] <- 'F'
ll_data_frame$structured_targ[ll_data_frame$structured_targ == f_not_false] <- 'F'
# TO DO : Did participants see the first_targ during the structured condition and second_targ during the random condition?
# TO DO: Also, are we including reaction times for responses during the stimuli preceding/ following for l and v trials?
# TO DO: Remove points outside 2.5 Stdev of mean?
# TO DO: Image index in a way that accounts for different repetitions of S/R blocks. EG: participant A's two R blocks are merged.
# he doesn't respond during the last target of an S block, which is the last stimulus, so we take his reaction time from the
# following stimulus (which is actually the first stimulus of the next S block)
# ******************** I. PREPARE FILES *************************
# Prepare workspace ------------------------------------------------------------------------------------------------------
# Remove objects in environment
rm(list=ls())
# Prepare paths for files --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Prepare paths for files --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#For use on Mac
ll_input <- ("../../../sit_data/clean/ll_clean/")
lv_input <- ("../../../sit_data/clean/lv_clean/")
vl_input <- ("../../../sit_data/clean/vl_clean/")
vv_input <- ("../../../sit_data/clean/vv_clean/")
# Read in ll files and combine them into one data frame -----------------------------------------------------------------------------------------------------------------------------------
ll_underscore_files <- list.files(path=ll_input, pattern = ".csv")
#Remove the underscores in file names
ll_files <- gsub("_", "", ll_underscore_files)
# Prepare data_frame to hold the files you're reading in
ll_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in ll_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(ll_input, file, sep="")))
}
# Combine each file with the previous files into ll_data_frame
for (file in ll_files){ll_data_frame <- append(ll_data_frame, list(eval(parse(text=file))))}
ll_data_frame <- do.call(rbind.data.frame, ll_data_frame)
# to test
r_targs_before <- unique(ll_data_frame$random_targ)
s_targs_before <- unique(ll_data_frame$structured_targ)
# Read "f_not_false" as "F"
ll_data_frame$random_targ[ll_data_frame$random_targ == "f_not_false"] <- "F"
ll_data_frame$structured_targ[ll_data_frame$structured_targ == "f_not_false"] <- "F"
# to test
r_targs_after <- unique(ll_data_frame$random_targ)
s_targs_after <- unique(ll_data_frame$structured_targ)
VIew(s_targs_after)
View(s_targs_after)
# Remove objects in environment
rm(list=ls())
#For use on Mac
ll_input <- ("../../../sit_data/clean/ll_clean/")
lv_input <- ("../../../sit_data/clean/lv_clean/")
vl_input <- ("../../../sit_data/clean/vl_clean/")
vv_input <- ("../../../sit_data/clean/vv_clean/")
ll_underscore_files <- list.files(path=ll_input, pattern = ".csv")
#Remove the underscores in file names
ll_files <- gsub("_", "", ll_underscore_files)
# Prepare data_frame to hold the files you're reading in
ll_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in ll_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(ll_input, file, sep="")))
}
# Combine each file with the previous files into ll_data_frame
for (file in ll_files){ll_data_frame <- append(ll_data_frame, list(eval(parse(text=file))))}
ll_data_frame <- do.call(rbind.data.frame, ll_data_frame)
# Remove .png from image names
ll_data_frame$image <- gsub (".png", "", ll_data_frame$image, ignore.case=TRUE)
lv_underscore_files <- list.files(path=lv_input, pattern = ".csv")
#Remove the underscores in file names
lv_files <- gsub("_", "", lv_underscore_files)
# Prepare data_frame to hold the files you're reading in
lv_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in lv_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(lv_input, file, sep="")))
}
# Combine each file with the previous files into lv_data_frame
for (file in lv_files){lv_data_frame <- append(lv_data_frame, list(eval(parse(text=file))))}
lv_data_frame <- do.call(rbind.data.frame, lv_data_frame)
#convert targets to string
lv_data_frame$random_targ<-toString(lv_data_frame$random_targ)
lv_data_frame$structured_targ<-toString(lv_data_frame$structured_targ)
# Remove .png from image names
lv_data_frame$image <- gsub (".png", "", lv_data_frame$image, ignore.case=TRUE)
vl_underscore_files <- list.files(path=vl_input, pattern = ".csv")
#Remove the underscores in file names
vl_files <- gsub("_", "", vl_underscore_files)
# Prepare data_frame to hold the files you're reading in
vl_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in vl_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(vl_input, file, sep="")))
}
# Combine each file with the previous files into vl_data_frame
for (file in vl_files){vl_data_frame <- append(vl_data_frame, list(eval(parse(text=file))))}
vl_data_frame <- do.call(rbind.data.frame, vl_data_frame)
#convert targets to string
vl_data_frame$random_targ<-toString(vl_data_frame$random_targ)
vl_data_frame$structured_targ<-toString(vl_data_frame$structured_targ)
# Remove .png from image names
vl_data_frame$image <- gsub (".png", "", vl_data_frame$image, ignore.case=TRUE)
vv_underscore_files <- list.files(path=vv_input, pattern = ".csv")
#Remove the underscores in file names
vv_files <- gsub("_", "", vv_underscore_files)
# Prepare data_frame to hold the files you're reading in
vv_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in vv_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(vv_input, file, sep="")))
}
# Combine each file with the previous files into vv_data_frame
for (file in vv_files){vv_data_frame <- append(vv_data_frame, list(eval(parse(text=file))))}
vv_data_frame <- do.call(rbind.data.frame, vv_data_frame)
#convert targets to string
vv_data_frame$random_targ<-toString(vv_data_frame$random_targ)
vv_data_frame$structured_targ<-toString(vv_data_frame$structured_targ)
# Remove .png from image names
vv_data_frame$image <- gsub (".png", "", vv_data_frame$image, ignore.case=TRUE)
# Separate random and structured conditions
random_ll <- ll_data_frame[ which(ll_data_frame$condition== "R"),]
structured_ll <- ll_data_frame[ which(ll_data_frame$condition== "S"),]
# List unique participant IDs for this condition
list_part_id <- unique(ll_data_frame$part_id)
View(list_part_id)
# Find the number of images shown to each participant
random_images_per_participant <- NULL
for(i in list_part_id){random_images_per_participant <- append(random_images_per_participant,sum(random_ll$part_id==i))}
smeeble <- rbind(random_images_per_participant, list_part_id)
smeeble <- cbind(random_images_per_participant, unlist(list_part_id))
testing_ids <- cbind(random_images_per_participant, list_part_id)
# TO DO : Did participants see the first_targ during the structured condition and second_targ during the random condition?
# TO DO: Also, are we including reaction times for responses during the stimuli preceding/ following for l and v trials?
# TO DO: Remove points outside 2.5 Stdev of mean?
# TO DO: Image index in a way that accounts for different repetitions of S/R blocks. EG: participant A's two R blocks are merged.
# he doesn't respond during the last target of an S block, which is the last stimulus, so we take his reaction time from the
# following stimulus (which is actually the first stimulus of the next S block)
# TO DO: Successfully replace "f_not_false" with "F"
# TO DO: Why is id_test returning an odd, different list from the list of ids?
# ******************** I. PREPARE FILES *************************
# Prepare workspace ------------------------------------------------------------------------------------------------------
# Remove objects in environment
rm(list=ls())
# Prepare paths for files --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Prepare paths for files --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#For use on Mac
ll_input <- ("../../../sit_data/clean/ll_clean/")
lv_input <- ("../../../sit_data/clean/lv_clean/")
vl_input <- ("../../../sit_data/clean/vl_clean/")
vv_input <- ("../../../sit_data/clean/vv_clean/")
# Read in ll files and combine them into one data frame -----------------------------------------------------------------------------------------------------------------------------------
ll_underscore_files <- list.files(path=ll_input, pattern = ".csv")
#Remove the underscores in file names
ll_files <- gsub("_", "", ll_underscore_files)
# Prepare data_frame to hold the files you're reading in
ll_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in ll_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(ll_input, file, sep="")))
}
# Combine each file with the previous files into ll_data_frame
for (file in ll_files){ll_data_frame <- append(ll_data_frame, list(eval(parse(text=file))))}
ll_data_frame <- do.call(rbind.data.frame, ll_data_frame)
# Read "f_not_false" as "F"
#ll_data_frame$random_targ[ll_data_frame$random_targ == "f_not_false"] <- "F"
#ll_data_frame$structured_targ[ll_data_frame$structured_targ == "f_not_false"] <- "F"
# Remove .png from image names
ll_data_frame$image <- gsub (".png", "", ll_data_frame$image, ignore.case=TRUE)
# Read in lv files and combine them into one data frame -----------------------------------------------------------------------------------------------------------------------------------
lv_underscore_files <- list.files(path=lv_input, pattern = ".csv")
#Remove the underscores in file names
lv_files <- gsub("_", "", lv_underscore_files)
# Prepare data_frame to hold the files you're reading in
lv_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in lv_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(lv_input, file, sep="")))
}
# Combine each file with the previous files into lv_data_frame
for (file in lv_files){lv_data_frame <- append(lv_data_frame, list(eval(parse(text=file))))}
lv_data_frame <- do.call(rbind.data.frame, lv_data_frame)
#convert targets to string
lv_data_frame$random_targ<-toString(lv_data_frame$random_targ)
lv_data_frame$structured_targ<-toString(lv_data_frame$structured_targ)
# to test
#r_targs_before <- unique(lv_data_frame$random_targ)
#s_targs_before <- unique(lv_data_frame$structured_targ)
# Read "f_not_false" as "F"
#lv_data_frame$random_targ[lv_data_frame$random_targ == 'f_not_false'] <- 'F'
#lv_data_frame$structured_targ[lv_data_frame$structured_targ == 'f_not_false'] <- 'F'
# to test
#r_targs_after <- unique(lv_data_frame$random_targ)
#s_targs_after <- unique(lv_data_frame$structured_targ)
# Remove .png from image names
lv_data_frame$image <- gsub (".png", "", lv_data_frame$image, ignore.case=TRUE)
# Read in vl files and combine them into one data frame -----------------------------------------------------------------------------------------------------------------------------------
vl_underscore_files <- list.files(path=vl_input, pattern = ".csv")
#Remove the underscores in file names
vl_files <- gsub("_", "", vl_underscore_files)
# Prepare data_frame to hold the files you're reading in
vl_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in vl_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(vl_input, file, sep="")))
}
# Combine each file with the previous files into vl_data_frame
for (file in vl_files){vl_data_frame <- append(vl_data_frame, list(eval(parse(text=file))))}
vl_data_frame <- do.call(rbind.data.frame, vl_data_frame)
#convert targets to string
vl_data_frame$random_targ<-toString(vl_data_frame$random_targ)
vl_data_frame$structured_targ<-toString(vl_data_frame$structured_targ)
# to test
#r_targs_before <- unique(vl_data_frame$random_targ)
#s_targs_before <- unique(vl_data_frame$structured_targ)
# Read "f_not_false" as "F"
#vl_data_frame$random_targ[vl_data_frame$random_targ == 'f_not_false'] <- 'F'
#vl_data_frame$structured_targ[vl_data_frame$structured_targ == 'f_not_false'] <- 'F'
# to test
#r_targs_after <- unique(vl_data_frame$random_targ)
#s_targs_after <- unique(vl_data_frame$structured_targ)
# Remove .png from image names
vl_data_frame$image <- gsub (".png", "", vl_data_frame$image, ignore.case=TRUE)
# Read in vv files and combine them into one data frame -----------------------------------------------------------------------------------------------------------------------------------
vv_underscore_files <- list.files(path=vv_input, pattern = ".csv")
#Remove the underscores in file names
vv_files <- gsub("_", "", vv_underscore_files)
# Prepare data_frame to hold the files you're reading in
vv_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in vv_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(vv_input, file, sep="")))
}
# Combine each file with the previous files into vv_data_frame
for (file in vv_files){vv_data_frame <- append(vv_data_frame, list(eval(parse(text=file))))}
vv_data_frame <- do.call(rbind.data.frame, vv_data_frame)
#convert targets to string
vv_data_frame$random_targ<-toString(vv_data_frame$random_targ)
vv_data_frame$structured_targ<-toString(vv_data_frame$structured_targ)
# to test
#r_targs_before <- unique(vv_data_frame$random_targ)
#s_targs_before <- unique(vv_data_frame$structured_targ)
# Read "f_not_false" as "F"
#vv_data_frame$random_targ[vv_data_frame$random_targ == 'f_not_false'] <- 'F'
#vv_data_frame$structured_targ[vv_data_frame$structured_targ == 'f_not_false'] <- 'F'
# to test
#r_targs_after <- unique(vv_data_frame$random_targ)
#s_targs_after <- unique(vv_data_frame$structured_targ)
# Remove .png from image names
vv_data_frame$image <- gsub (".png", "", vv_data_frame$image, ignore.case=TRUE)
# Separate random and structured conditions
random_ll <- ll_data_frame[ which(ll_data_frame$condition== "R"),]
structured_ll <- ll_data_frame[ which(ll_data_frame$condition== "S"),]
# List unique participant IDs for this condition
list_part_id <- unique(ll_data_frame$part_id)
# Find the number of images shown to each participant
random_images_per_participant <- NULL
for(i in list_part_id){random_images_per_participant <- append(random_images_per_participant,sum(random_ll$part_id==i))}
id_test <- cbind(random_images_per_participant, list_part_id)
#for testing purposes
id_test <- cbind(random_images_per_participant, list_part_id)
View(id_test)
View(list_part_id)
#for testing purposes
id_test <- cbind(random_images_per_participant, list_part_id[1])
#for testing purposes
id_test <- cbind(random_images_per_participant, list_part_id[2])
View(list_part_id)
#for testing purposes
id_test <- cbind(random_images_per_participant, list_part_id)
typeof(id_test)
# List unique participant IDs for this condition
list_part_id <- unique(ll_data_frame$part_id)
list_part_id <- toString(list_part_id)
View(list_part_id)
list_part_id
# Find the number of images shown to each participant
random_images_per_participant <- NULL
for(i in list_part_id){random_images_per_participant <- append(random_images_per_participant,sum(random_ll$part_id==i))}
#for testing purposes
id_test <- cbind(random_images_per_participant, list_part_id)
# List unique participant IDs for this condition
list_part_id <- unique(ll_data_frame$part_id)
#test
View(typeOf(list_part_id))
#test
View(typeof(list_part_id))
# Separate random and structured conditions
random_ll <- ll_data_frame[ which(ll_data_frame$condition== "R"),]
structured_ll <- ll_data_frame[ which(ll_data_frame$condition== "S"),]
# List unique participant IDs for this condition
list_part_id <- unique(ll_data_frame$part_id)
#test
View(typeof(list_part_id))
# Find the number of images shown to each participant
random_images_per_participant <- NULL
for(i in list_part_id){random_images_per_participant <- append(random_images_per_participant,sum(random_ll$part_id==i))}
#for testing purposes
id_test <- cbind(random_images_per_participant, list_part_id)
# For each participant, index the targets
image_index <- NULL
for (i in random_images_per_participant) {image_index <- append (image_index, rep(1:random_images_per_participant, 1))}
warnings()
# Add the targets' indices
random_ll$image_index <- image_index
# For each participant, index the targets
image_index <- NULL
for (i in random_images_per_participant) {image_index <- append (image_index, rep(1:random_images_per_participant, 1))}
