# Install packages
install.packages("reshape")
install.packages("dplyr")
install.packages("corrplot")
# Remove objects in environment
rm(list=ls())
library("reshape")
library("dplyr")
library("corrplot")
#For use on Mac
ll_input <- ("../../../sit_data/clean/ll_clean/")
lv_input <- ("../../../sit_data/clean/lv_clean/")
vl_input <- ("../../../sit_data/clean/vl_clean/")
vv_input <- ("../../../sit_data/clean/vv_clean/")
vocab_input <- ("../../../sit_data/clean/vocab_clean/vocab_clean.csv")
picture_vocab <- read.csv(vocab_input)
setwd(Documents/qlab/analysis/sit-beh-analysis)
setwd("Documents/qlab/analysis/sit-beh-analysis")
getwd()
#For use on Mac
ll_input <- ("../../../sit_data/clean/ll_clean/")
lv_input <- ("../../../sit_data/clean/lv_clean/")
vl_input <- ("../../../sit_data/clean/vl_clean/")
vv_input <- ("../../../sit_data/clean/vv_clean/")
vocab_input <- ("../../../sit_data/clean/vocab_clean/vocab_clean.csv")
picture_vocab <- read.csv(vocab_input)
vocab_input <- ("../../../sit_data/clean/vocab_clean/vocab_clean.csv")
picture_vocab <- read.csv(vocab_input)
vocab_input <- ("../../../sit_data/clean/vocab_clean/vocab_clean.csv")
picture_vocab <- read.csv(vocab_input)
ll_underscore_files <- list.files(path=ll_input, pattern = ".csv")
#Remove the underscores in file names
ll_files <- gsub("_", "", ll_underscore_files)
# Prepare data_frame to hold the files you're reading in
ll_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in ll_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(ll_input, file, sep="")))
}
# Combine each file with the previous files into ll_data_frame
for (file in ll_files){ll_data_frame <- append(ll_data_frame, list(eval(parse(text=file))))}
ll_data_frame <- do.call(rbind.data.frame, ll_data_frame)
# Read "f_not_false" as "F"
levels(ll_data_frame$structured_targ)[levels(ll_data_frame$structured_targ)=="f_not_false"] <- "F"
levels(ll_data_frame$random_targ)[levels(ll_data_frame$random_targ)=="f_not_false"] <- "F"
ll_data_frame$l_block_trial_key_resp.rt<-ll_data_frame$l_block_trial_key_resp.rt*1000
# Remove .png from image names
ll_data_frame$image <- gsub (".png", "", ll_data_frame$image, ignore.case=TRUE)
lv_underscore_files <- list.files(path=lv_input, pattern = ".csv")
#Remove the underscores in file names
lv_files <- gsub("_", "", lv_underscore_files)
# Prepare data_frame to hold the files you're reading in
lv_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in lv_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(lv_input, file, sep="")))
}
# Combine each file with the previous files into lv_data_frame
for (file in lv_files){lv_data_frame <- append(lv_data_frame, list(eval(parse(text=file))))}
lv_data_frame <- do.call(rbind.data.frame, lv_data_frame)
# Read "f_not_false" as "F"
levels(lv_data_frame$structured_targ)[levels(lv_data_frame$structured_targ)=="f_not_false"] <- "F"
levels(lv_data_frame$random_targ)[levels(lv_data_frame$random_targ)=="f_not_false"] <- "F"
# Convert response times to milliseconds
lv_data_frame$l_block_trial_key_resp.rt <- lv_data_frame$l_block_trial_key_resp.rt*1000
lv_data_frame$v_block_trial_key_resp.rt <- lv_data_frame$v_block_trial_key_resp.rt*1000
# Remove .png from image names
lv_data_frame$image <- gsub (".png", "", lv_data_frame$image, ignore.case=TRUE)
vl_underscore_files <- list.files(path=vl_input, pattern = ".csv")
#Remove the underscores in file names
vl_files <- gsub("_", "", vl_underscore_files)
# Prepare data_frame to hold the files you're reading in
vl_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in vl_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(vl_input, file, sep="")))
}
# Combine each file with the previous files into vl_data_frame
for (file in vl_files){vl_data_frame <- append(vl_data_frame, list(eval(parse(text=file))))}
vl_data_frame <- do.call(rbind.data.frame, vl_data_frame)
# Read "f_not_false" as "F"
levels(vl_data_frame$structured_targ)[levels(vl_data_frame$structured_targ)=="f_not_false"] <- "F"
levels(vl_data_frame$random_targ)[levels(vl_data_frame$random_targ)=="f_not_false"] <- "F"
# Convert response times to milliseconds
vl_data_frame$l_block_trial_key_resp.rt <- vl_data_frame$l_block_trial_key_resp.rt*1000
vl_data_frame$v_block_trial_key_resp.rt <- vl_data_frame$v_block_trial_key_resp.rt*1000
# Remove .png from image names
vl_data_frame$image <- gsub (".png", "", vl_data_frame$image, ignore.case=TRUE)
vv_underscore_files <- list.files(path=vv_input, pattern = ".csv")
#Remove the underscores in file names
vv_files <- gsub("_", "", vv_underscore_files)
# Prepare data_frame to hold the files you're reading in
vv_data_frame<-list()
# Remove the dashes in each file name read it in
for(file in vv_underscore_files)
{
assign(
gsub("_", "", file),
read_file <- read.csv(paste(vv_input, file, sep="")))
}
# Combine each file with the previous files into vv_data_frame
for (file in vv_files){vv_data_frame <- append(vv_data_frame, list(eval(parse(text=file))))}
vv_data_frame <- do.call(rbind.data.frame, vv_data_frame)
# Convert response times to milliseconds
vv_data_frame$v_block_trial_key_resp.rt <- vv_data_frame$v_block_trial_key_resp.rt*1000
# Remove .png from image names
vv_data_frame$image <- gsub (".png", "", vv_data_frame$image, ignore.case=TRUE)
# Separate random and structured conditions
random_ll <- ll_data_frame[ which(ll_data_frame$condition== "R"),]
structured_ll <- ll_data_frame[ which(ll_data_frame$condition== "S"),]
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
target_rt <- NULL
#following_rt <- NULL
preceding_rt <- NULL
id <- NULL
trial <-NULL
this_id <- NULL
this_trial_num <- NULL
this_loop <- NULL
loop <- NULL
#following_loop <- NULL
preceding_loop <- NULL
#loop_after <- NULL
loop_before <- NULL
this_targ_rt <- NULL
rt_before <- NULL
loop_before <- NULL
this_targ_rt <- NULL
rt_before <- NULL
case <- NULL
rt_before <- NULL
case <- NULL
this_trial_before <- NULL
this_trial_num_before <- NULL
trial_before_df <- NULL
trial_num_before <- NULL
# Identify the rows when this condition's target was presented
random_ll_targets <- random_ll[which(random_ll$random_targ==random_ll$image),]
structured_ll_targets <- structured_ll[which(structured_ll$structured_targ==structured_ll$image),]
# Isolate participants' response times.
# Include rows when the participant responded to stimuli adjacent to the target (i.e. any time that the participant pressed the button within one stimulus before or after the target)
for(i in 1:nrow(random_ll_targets))
{
# Isolate the ID number
this_id <- random_ll_targets[i,]$part_id
id <- append(id, paste(this_id))
# Isolate the trial number
this_trial_num <- random_ll_targets[i,]$trial_num
trial <- append(trial, paste(this_trial_num))
# Isolate the target's rt
this_targ_rt <- random_ll_targets[i,]$l_block_trial_key_resp.rt
target_rt <- append(target_rt, paste(this_targ_rt))
# Isolate the loop value
this_loop <- random_ll_targets[i,]$this_l_loop
loop <- append (loop, this_loop)
# Isolate the row with the following trial for that participant
#following_trial <- random_ll[which(random_ll$trial_num==this_trial_num+1 & random_ll$part_id==this_id), ]
# Isolate the row with the preceding trial for that participant
this_trial_before <- random_ll[which(random_ll$trial_num==this_trial_num-1 & random_ll$part_id==this_id), ][1,]
trial_before_df <- rbind (this_trial_before, this_trial_before)
this_trial_num_before <- this_trial_before$trial_num
trial_num_before <- append (trial_num_before, this_trial_num)
# Isolate the following row's this_l_loop value.
#following_loop <- following_trial$this_l_loop
#loop_after <- append(loop_after, following_loop)
# Isolate the preceding row's this_l_loop value.
preceding_loop <- this_trial_before$this_l_loop
loop_before <- append(loop_before, preceding_loop)
#loop_after <- append (loop_after, following_loop)
preceding_rt <- this_trial_before$l_block_trial_key_resp.rt
rt_before <- append (rt_before, preceding_rt)
# If the participant responded while the target was presented
if (!is.na(random_ll_targets[i,] [,"l_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, random_ll_targets[i,][,"l_block_trial_key_resp.rt"])
}
#  # If the participant responded during the stimulus following the target (implies that we are not in the last row, which would not have a following row)
# else if (!is.na(following_trial["l_block_trial_key_resp.rt"])){
#  # And the following line is from the same block
# if (following_loop==this_loop+1){
#  # Take the rt from the following line
# following_rt <- following_trial$l_block_trial_key_resp.rt
#rt_after <- append (rt_after, following_rt)
## And add the duration that the target stimulus was presented (1000 ms)
##rt_col <- append (rt_col, .1+following_rt)}}
#rt_col <- append (rt_col, "test_2")
#preceding_rt <- "case 2"
#rt_before <- append (rt_before, preceding_rt)}}
# If the participant responded during the stimulus preceding the target (implies that we are not in the first row, which would not have a preceding row)
else if (!is.na(this_trial_before["l_block_trial_key_resp.rt"])){
# And the preceding line is from the same block
if (preceding_loop==this_loop-1){
# Take the rt from the preceding line and subtract it from 0, to determine how far in advance they responded
rt_col <- append (rt_col, 0-(1000-preceding_rt))
case <- append (case, "case 2")}
else {
# Copy the target response time of NA
rt_col <- append (rt_col, this_targ_rt)
case <- append (case, "case 3")}
}
# If the participant did not respond within 1 stimulus preceding the target,
else if (is.na(random_ll_targets[i,] [,"l_block_trial_key_resp.rt"])){
# Copy their response time of NA
rt_col <- append (rt_col, this_targ_rt)
case <- append (case, "case 4")}
else{
rt_col <- append (rt_col, "anomaly, this shouldn't happen")
case <- append (case, "case 5")}
}
# Match id and response times
random_ll_extracted <- data.frame(id, trial, trial_num_before, loop, loop_before, target_rt, rt_before, rt_col)
View(random_ll)
View(random_ll_extracted)
View(random_ll_targets)
View(random_ll)
# Separate random and structured conditions
random_ll <- ll_data_frame[ which(ll_data_frame$condition== "R"),]
structured_ll <- ll_data_frame[ which(ll_data_frame$condition== "S"),]
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
target_rt <- NULL
preceding_rt <- NULL
id <- NULL
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
target_rt <- NULL
preceding_rt <- NULL
id <- NULL
trial <-NULL
this_id <- NULL
this_trial_num <- NULL
this_loop <- NULL
loop <- NULL
preceding_loop <- NULL
loop_before <- NULL
this_targ_rt <- NULL
rt_before <- NULL
case <- NULL
this_trial_before <- NULL
this_trial_num_before <- NULL
trial_before_df <- NULL
trial_num_before <- NULL
# Identify the rows when this condition's target was presented
random_ll_targets <- random_ll[which(random_ll$random_targ==random_ll$image),]
structured_ll_targets <- structured_ll[which(structured_ll$structured_targ==structured_ll$image),]
task <- c("ll", "lv", "vl", "vv")
random <- c("1.173", "1.112", "1.202", "1.14")
structured <- c("1.013", "-1.254", "-2.554", "-2.376")
testy <- cbind(task, random, structured)
View(testy)
typeof(testy)
sapply(testy, class)
barplot(testy, main="Mean Accuracy",
xlab="Task")
barplot(testy, main="Mean Accuracy by Task",
xlab="Task", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
barplot(testy, main="Mean Accuracy by Task",
xlab="Task", col=c("darkblue","red"),
legend = rownames(testy), beside=TRUE)
task <- c("letter", "image")
same <- c(0.583, 0.635)
different <- c(0.609, 0.661)
testy2 <- cbind(task, same, different)
sapply(testy2, class)
same <- as.numeric(c(0.583, 0.635))
different <- as.numeric(c(0.609, 0.661))
testy2 <- cbind(task, same, different)
sapply(testy2, class)
testy2 <- cbind(task, same, different)
testy2$same <- as.numeric(testy2$same)
testy2[1] <- as.numeric(testy2[1])
View(testy2)
testy2 <- cbind(task, same, different)
testy2[2] <- as.numeric(testy2[2])
testy2[3] <- as.numeric(testy2[3])
testy2 <- cbind(task, same, different)
testy2[2] <- as.numeric(testy2[,2])
testy2[3] <- as.numeric(testy2[,3])
testy2 <- cbind(task, same, different)
testy2[2] <- as.numeric(testy2[2,])
testy2[3] <- as.numeric(testy2[3,])
testy2 <- cbind(task, same, different)
testy2[2,] <- as.numeric(testy2[2,])
typeof(testy2)
testy2
testy2 <- cbind(task, same, different)
testy2[,2] <- as.numeric(testy2[,2])
testy2[,3] <- as.numeric(testy2[,3])
sapply(testy2, class)
View(testy2)
barplot(testy2, main="Mean Accuracy by Task",
xlab="Task", col=c("darkblue","red"),
legend = rownames(testy2), beside=TRUE)
barplot(as.matrix(testy), main="Mean Accuracy by Task",
xlab="Task", col=c("darkblue","red"),
legend = rownames(testy), beside=TRUE)
task <- c("ll", "lv", "vl", "vv")
random <- c("1.173", "1.112", "1.202", "1.14")
structured <- c("1.013", "-1.254", "-2.554", "-2.376")
testy <- cbind(task, random, structured)
barplot(testy, main="Mean Accuracy",
xlab="Task")
barplot(as.matrix(testy), main="Mean Accuracy by Task",
xlab="Task", col=c("darkblue","red"),
legend = rownames(testy), beside=TRUE)
testy3 <- as.matrix(as.data.frame(testy))
barplot(as.matrix(testy3), main="Mean Accuracy by Task",
xlab="Task", col=c("darkblue","red"),
legend = rownames(testy3), beside=TRUE)
task <- r("ll", "lv", "vl", "vv")
task <- ("ll", "lv", "vl", "vv")
task <- c("ll", "lv", "vl", "vv")
random <- c("1.173", "1.112", "1.202", "1.14")
structured <- c("1.013", "-1.254", "-2.554", "-2.376")
testy <- rbind(task, random, structured)
barplot(testy, main="Mean Accuracy",
xlab="Task")
barplot(as.matrix(testy3), main="Mean Accuracy by Task",
xlab="Task", col=c("darkblue","red"),
legend = rownames(testy3), beside=TRUE)
task <- c("ll", "lv", "vl", "vv")
random <- c("1.173", "1.112", "1.202", "1.14")
structured <- c("1.013", "-1.254", "-2.554", "-2.376")
bars <- cbind(task, random, structured)
barplot(bars, beside = TRUE, col = c("green", "black"))
typeof(random)
bars <- cbind(task, as.numeric(random), as.numeric(structured))
barplot(bars, beside = TRUE, col = c("green", "black"))
sapply(bars, class)
bars
bars <- data.frame(task, as.numeric(random), as.numeric(structured))
barplot(bars, beside = TRUE, col = c("green", "black"))
bars <- as.matrix((data.frame(task, as.numeric(random), as.numeric(structured)))
bars <- as.matrix((data.frame(task, as.numeric(random), as.numeric(structured))))
bars <- as.matrix(data.frame(task, as.numeric(random), as.numeric(structured)))
barplot(bars, beside = TRUE, col = c("green", "black"))
bars
typeof(bars)
bars<-as.numeric(bars)
sapply(task, class)
sapply(random, class)
random <- numeric(random)
task <- c("ll", "lv", "vl", "vv")
task <- c("ll", "lv", "vl", "vv")
random <- c(1.173, 1.112, 1.202, 1.14)
structured <- c(1.013, -1.254, -2.554, -2.376)
bars <- as.matrix(data.frame(task, as.numeric(random), as.numeric(structured)))
bars<-as.numeric(bars)
bars <- as.matrix(data.frame(task, as.numeric(random), as.numeric(structured)))
barplot(bars, beside = TRUE, col = c("green", "black"))
sapply(bars, class)
# Grouped Bar Plot
counts <- table(mtcars$vs, mtcars$gear)
Counts
counts
counts[1] <- task
counts[,1] <- task
xounts
counts
View(counts)
counts2 <- counts [1:3,]
counts2 <- counts [1:3,]
counts2 <- counts [,1:3]
View(counts2)
counts2 <- counts [1:3,]
counts2 <- counts [1:3,:]
counts2 <- counts [1:3]
counts2 <- counts [3]
library(plotly)
install.packages(plotly)
library(plotly)
install.packages("plotly")
Animals <- c("giraffes", "orangutans", "monkeys")
SF_Zoo <- c(20, 14, 23)
LA_Zoo <- c(12, 18, 29)
data <- data.frame(Animals, SF_Zoo, LA_Zoo)
p <- plot_ly(data, x = ~Animals, y = ~SF_Zoo, type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
p
